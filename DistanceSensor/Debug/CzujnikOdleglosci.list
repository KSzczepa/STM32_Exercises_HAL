
CzujnikOdleglosci.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a4  080048a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048ac  080048ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048ac  080048ac  000148ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08004924  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004924  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b200  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b74  00000000  00000000  0002b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b90  00000000  00000000  0002ce18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0002d9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015cd5  00000000  00000000  0002e440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009710  00000000  00000000  00044115  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a79c  00000000  00000000  0004d825  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7fc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003388  00000000  00000000  000d803c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004830 	.word	0x08004830

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004830 	.word	0x08004830

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b972 	b.w	8000944 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9e08      	ldr	r6, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	4688      	mov	r8, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d14b      	bne.n	800071e <__udivmoddi4+0xa6>
 8000686:	428a      	cmp	r2, r1
 8000688:	4615      	mov	r5, r2
 800068a:	d967      	bls.n	800075c <__udivmoddi4+0xe4>
 800068c:	fab2 f282 	clz	r2, r2
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0720 	rsb	r7, r2, #32
 8000696:	fa01 f302 	lsl.w	r3, r1, r2
 800069a:	fa20 f707 	lsr.w	r7, r0, r7
 800069e:	4095      	lsls	r5, r2
 80006a0:	ea47 0803 	orr.w	r8, r7, r3
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80006b0:	fa1f fc85 	uxth.w	ip, r5
 80006b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006bc:	fb07 f10c 	mul.w	r1, r7, ip
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18eb      	adds	r3, r5, r3
 80006c6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006ca:	f080 811b 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8118 	bls.w	8000904 <__udivmoddi4+0x28c>
 80006d4:	3f02      	subs	r7, #2
 80006d6:	442b      	add	r3, r5
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ec:	45a4      	cmp	ip, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	192c      	adds	r4, r5, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8107 	bcs.w	8000908 <__udivmoddi4+0x290>
 80006fa:	45a4      	cmp	ip, r4
 80006fc:	f240 8104 	bls.w	8000908 <__udivmoddi4+0x290>
 8000700:	3802      	subs	r0, #2
 8000702:	442c      	add	r4, r5
 8000704:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000708:	eba4 040c 	sub.w	r4, r4, ip
 800070c:	2700      	movs	r7, #0
 800070e:	b11e      	cbz	r6, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c6 4300 	strd	r4, r3, [r6]
 8000718:	4639      	mov	r1, r7
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	428b      	cmp	r3, r1
 8000720:	d909      	bls.n	8000736 <__udivmoddi4+0xbe>
 8000722:	2e00      	cmp	r6, #0
 8000724:	f000 80eb 	beq.w	80008fe <__udivmoddi4+0x286>
 8000728:	2700      	movs	r7, #0
 800072a:	e9c6 0100 	strd	r0, r1, [r6]
 800072e:	4638      	mov	r0, r7
 8000730:	4639      	mov	r1, r7
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	fab3 f783 	clz	r7, r3
 800073a:	2f00      	cmp	r7, #0
 800073c:	d147      	bne.n	80007ce <__udivmoddi4+0x156>
 800073e:	428b      	cmp	r3, r1
 8000740:	d302      	bcc.n	8000748 <__udivmoddi4+0xd0>
 8000742:	4282      	cmp	r2, r0
 8000744:	f200 80fa 	bhi.w	800093c <__udivmoddi4+0x2c4>
 8000748:	1a84      	subs	r4, r0, r2
 800074a:	eb61 0303 	sbc.w	r3, r1, r3
 800074e:	2001      	movs	r0, #1
 8000750:	4698      	mov	r8, r3
 8000752:	2e00      	cmp	r6, #0
 8000754:	d0e0      	beq.n	8000718 <__udivmoddi4+0xa0>
 8000756:	e9c6 4800 	strd	r4, r8, [r6]
 800075a:	e7dd      	b.n	8000718 <__udivmoddi4+0xa0>
 800075c:	b902      	cbnz	r2, 8000760 <__udivmoddi4+0xe8>
 800075e:	deff      	udf	#255	; 0xff
 8000760:	fab2 f282 	clz	r2, r2
 8000764:	2a00      	cmp	r2, #0
 8000766:	f040 808f 	bne.w	8000888 <__udivmoddi4+0x210>
 800076a:	1b49      	subs	r1, r1, r5
 800076c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000770:	fa1f f885 	uxth.w	r8, r5
 8000774:	2701      	movs	r7, #1
 8000776:	fbb1 fcfe 	udiv	ip, r1, lr
 800077a:	0c23      	lsrs	r3, r4, #16
 800077c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000780:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000784:	fb08 f10c 	mul.w	r1, r8, ip
 8000788:	4299      	cmp	r1, r3
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x124>
 800078c:	18eb      	adds	r3, r5, r3
 800078e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x122>
 8000794:	4299      	cmp	r1, r3
 8000796:	f200 80cd 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 800079a:	4684      	mov	ip, r0
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	b2a3      	uxth	r3, r4
 80007a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007ac:	fb08 f800 	mul.w	r8, r8, r0
 80007b0:	45a0      	cmp	r8, r4
 80007b2:	d907      	bls.n	80007c4 <__udivmoddi4+0x14c>
 80007b4:	192c      	adds	r4, r5, r4
 80007b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x14a>
 80007bc:	45a0      	cmp	r8, r4
 80007be:	f200 80b6 	bhi.w	800092e <__udivmoddi4+0x2b6>
 80007c2:	4618      	mov	r0, r3
 80007c4:	eba4 0408 	sub.w	r4, r4, r8
 80007c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007cc:	e79f      	b.n	800070e <__udivmoddi4+0x96>
 80007ce:	f1c7 0c20 	rsb	ip, r7, #32
 80007d2:	40bb      	lsls	r3, r7
 80007d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007dc:	fa01 f407 	lsl.w	r4, r1, r7
 80007e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007ec:	4325      	orrs	r5, r4
 80007ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80007f2:	0c2c      	lsrs	r4, r5, #16
 80007f4:	fb08 3319 	mls	r3, r8, r9, r3
 80007f8:	fa1f fa8e 	uxth.w	sl, lr
 80007fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000800:	fb09 f40a 	mul.w	r4, r9, sl
 8000804:	429c      	cmp	r4, r3
 8000806:	fa02 f207 	lsl.w	r2, r2, r7
 800080a:	fa00 f107 	lsl.w	r1, r0, r7
 800080e:	d90b      	bls.n	8000828 <__udivmoddi4+0x1b0>
 8000810:	eb1e 0303 	adds.w	r3, lr, r3
 8000814:	f109 30ff 	add.w	r0, r9, #4294967295
 8000818:	f080 8087 	bcs.w	800092a <__udivmoddi4+0x2b2>
 800081c:	429c      	cmp	r4, r3
 800081e:	f240 8084 	bls.w	800092a <__udivmoddi4+0x2b2>
 8000822:	f1a9 0902 	sub.w	r9, r9, #2
 8000826:	4473      	add	r3, lr
 8000828:	1b1b      	subs	r3, r3, r4
 800082a:	b2ad      	uxth	r5, r5
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000838:	fb00 fa0a 	mul.w	sl, r0, sl
 800083c:	45a2      	cmp	sl, r4
 800083e:	d908      	bls.n	8000852 <__udivmoddi4+0x1da>
 8000840:	eb1e 0404 	adds.w	r4, lr, r4
 8000844:	f100 33ff 	add.w	r3, r0, #4294967295
 8000848:	d26b      	bcs.n	8000922 <__udivmoddi4+0x2aa>
 800084a:	45a2      	cmp	sl, r4
 800084c:	d969      	bls.n	8000922 <__udivmoddi4+0x2aa>
 800084e:	3802      	subs	r0, #2
 8000850:	4474      	add	r4, lr
 8000852:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000856:	fba0 8902 	umull	r8, r9, r0, r2
 800085a:	eba4 040a 	sub.w	r4, r4, sl
 800085e:	454c      	cmp	r4, r9
 8000860:	46c2      	mov	sl, r8
 8000862:	464b      	mov	r3, r9
 8000864:	d354      	bcc.n	8000910 <__udivmoddi4+0x298>
 8000866:	d051      	beq.n	800090c <__udivmoddi4+0x294>
 8000868:	2e00      	cmp	r6, #0
 800086a:	d069      	beq.n	8000940 <__udivmoddi4+0x2c8>
 800086c:	ebb1 050a 	subs.w	r5, r1, sl
 8000870:	eb64 0403 	sbc.w	r4, r4, r3
 8000874:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000878:	40fd      	lsrs	r5, r7
 800087a:	40fc      	lsrs	r4, r7
 800087c:	ea4c 0505 	orr.w	r5, ip, r5
 8000880:	e9c6 5400 	strd	r5, r4, [r6]
 8000884:	2700      	movs	r7, #0
 8000886:	e747      	b.n	8000718 <__udivmoddi4+0xa0>
 8000888:	f1c2 0320 	rsb	r3, r2, #32
 800088c:	fa20 f703 	lsr.w	r7, r0, r3
 8000890:	4095      	lsls	r5, r2
 8000892:	fa01 f002 	lsl.w	r0, r1, r2
 8000896:	fa21 f303 	lsr.w	r3, r1, r3
 800089a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800089e:	4338      	orrs	r0, r7
 80008a0:	0c01      	lsrs	r1, r0, #16
 80008a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008a6:	fa1f f885 	uxth.w	r8, r5
 80008aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80008ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b2:	fb07 f308 	mul.w	r3, r7, r8
 80008b6:	428b      	cmp	r3, r1
 80008b8:	fa04 f402 	lsl.w	r4, r4, r2
 80008bc:	d907      	bls.n	80008ce <__udivmoddi4+0x256>
 80008be:	1869      	adds	r1, r5, r1
 80008c0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008c4:	d22f      	bcs.n	8000926 <__udivmoddi4+0x2ae>
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d92d      	bls.n	8000926 <__udivmoddi4+0x2ae>
 80008ca:	3f02      	subs	r7, #2
 80008cc:	4429      	add	r1, r5
 80008ce:	1acb      	subs	r3, r1, r3
 80008d0:	b281      	uxth	r1, r0
 80008d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008de:	fb00 f308 	mul.w	r3, r0, r8
 80008e2:	428b      	cmp	r3, r1
 80008e4:	d907      	bls.n	80008f6 <__udivmoddi4+0x27e>
 80008e6:	1869      	adds	r1, r5, r1
 80008e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008ec:	d217      	bcs.n	800091e <__udivmoddi4+0x2a6>
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d915      	bls.n	800091e <__udivmoddi4+0x2a6>
 80008f2:	3802      	subs	r0, #2
 80008f4:	4429      	add	r1, r5
 80008f6:	1ac9      	subs	r1, r1, r3
 80008f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008fc:	e73b      	b.n	8000776 <__udivmoddi4+0xfe>
 80008fe:	4637      	mov	r7, r6
 8000900:	4630      	mov	r0, r6
 8000902:	e709      	b.n	8000718 <__udivmoddi4+0xa0>
 8000904:	4607      	mov	r7, r0
 8000906:	e6e7      	b.n	80006d8 <__udivmoddi4+0x60>
 8000908:	4618      	mov	r0, r3
 800090a:	e6fb      	b.n	8000704 <__udivmoddi4+0x8c>
 800090c:	4541      	cmp	r1, r8
 800090e:	d2ab      	bcs.n	8000868 <__udivmoddi4+0x1f0>
 8000910:	ebb8 0a02 	subs.w	sl, r8, r2
 8000914:	eb69 020e 	sbc.w	r2, r9, lr
 8000918:	3801      	subs	r0, #1
 800091a:	4613      	mov	r3, r2
 800091c:	e7a4      	b.n	8000868 <__udivmoddi4+0x1f0>
 800091e:	4660      	mov	r0, ip
 8000920:	e7e9      	b.n	80008f6 <__udivmoddi4+0x27e>
 8000922:	4618      	mov	r0, r3
 8000924:	e795      	b.n	8000852 <__udivmoddi4+0x1da>
 8000926:	4667      	mov	r7, ip
 8000928:	e7d1      	b.n	80008ce <__udivmoddi4+0x256>
 800092a:	4681      	mov	r9, r0
 800092c:	e77c      	b.n	8000828 <__udivmoddi4+0x1b0>
 800092e:	3802      	subs	r0, #2
 8000930:	442c      	add	r4, r5
 8000932:	e747      	b.n	80007c4 <__udivmoddi4+0x14c>
 8000934:	f1ac 0c02 	sub.w	ip, ip, #2
 8000938:	442b      	add	r3, r5
 800093a:	e72f      	b.n	800079c <__udivmoddi4+0x124>
 800093c:	4638      	mov	r0, r7
 800093e:	e708      	b.n	8000752 <__udivmoddi4+0xda>
 8000940:	4637      	mov	r7, r6
 8000942:	e6e9      	b.n	8000718 <__udivmoddi4+0xa0>

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_GPIO_Init+0x68>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_GPIO_Init+0x68>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_GPIO_Init+0x68>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fc88 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f81c 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f7ff ffc2 	bl	8000948 <MX_GPIO_Init>
  MX_TIM1_Init();
 80009c4:	f000 fa28 	bl	8000e18 <MX_TIM1_Init>
  MX_TIM10_Init();
 80009c8:	f000 fb00 	bl	8000fcc <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80009cc:	f000 fbe2 	bl	8001194 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//initialization starting PWM
 80009d0:	2108      	movs	r1, #8
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <main+0x3c>)
 80009d4:	f001 fc9c 	bl	8002310 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 13); //high state: 10 us
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <main+0x3c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	220d      	movs	r2, #13
 80009de:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_Base_Start_IT(&htim10); //initialization TIM10 period interrupt
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <main+0x40>)
 80009e2:	f001 fc06 	bl	80021f2 <HAL_TIM_Base_Start_IT>

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);	//initialization capturing in TIM1 channel_1
 80009e6:	2100      	movs	r1, #0
 80009e8:	4801      	ldr	r0, [pc, #4]	; (80009f0 <main+0x3c>)
 80009ea:	f001 fcf9 	bl	80023e0 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <main+0x3a>
 80009f0:	2000010c 	.word	0x2000010c
 80009f4:	200000cc 	.word	0x200000cc

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b094      	sub	sp, #80	; 0x50
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	2230      	movs	r2, #48	; 0x30
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 faca 	bl	8003fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <SystemClock_Config+0xc8>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	4a26      	ldr	r2, [pc, #152]	; (8000ac0 <SystemClock_Config+0xc8>)
 8000a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2c:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <SystemClock_Config+0xc8>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <SystemClock_Config+0xcc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a20      	ldr	r2, [pc, #128]	; (8000ac4 <SystemClock_Config+0xcc>)
 8000a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <SystemClock_Config+0xcc>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a6c:	2364      	movs	r3, #100	; 0x64
 8000a6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a74:	2304      	movs	r3, #4
 8000a76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a78:	f107 0320 	add.w	r3, r7, #32
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 ff2b 	bl	80018d8 <HAL_RCC_OscConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a88:	f000 f8f0 	bl	8000c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a90:	2302      	movs	r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 f985 	bl	8001db8 <HAL_RCC_ClockConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ab4:	f000 f8da 	bl	8000c6c <Error_Handler>
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3750      	adds	r7, #80	; 0x50
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40007000 	.word	0x40007000

08000ac8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //Timer interrupt every 1 [s]
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	time = (Difference * 40000)/50000; //time in [us]
 8000ad0:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000ad8:	fb02 f303 	mul.w	r3, r2, r3
 8000adc:	4a30      	ldr	r2, [pc, #192]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ade:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae2:	1312      	asrs	r2, r2, #12
 8000ae4:	17db      	asrs	r3, r3, #31
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	ee07 3a90 	vmov	s15, r3
 8000aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000af2:	edc3 7a00 	vstr	s15, [r3]
	d = time / 58;
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000af8:	ed93 7a00 	vldr	s14, [r3]
 8000afc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000ba8 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8000b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b06:	edc3 7a00 	vstr	s15, [r3]
	di = (int)(d);
 8000b0a:	4b28      	ldr	r3, [pc, #160]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b0c:	edd3 7a00 	vldr	s15, [r3]
 8000b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b14:	ee17 2a90 	vmov	r2, s15
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000b1a:	601a      	str	r2, [r3, #0]
	rest = d-di;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b1e:	ed93 7a00 	vldr	s14, [r3]
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	ee07 3a90 	vmov	s15, r3
 8000b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000b34:	edc3 7a00 	vstr	s15, [r3]
	TurnInt = trunc(rest * 100);
 8000b38:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000b3a:	edd3 7a00 	vldr	s15, [r3]
 8000b3e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000bb8 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8000b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b46:	ee17 0a90 	vmov	r0, s15
 8000b4a:	f7ff fcfd 	bl	8000548 <__aeabi_f2d>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460c      	mov	r4, r1
 8000b52:	ec44 3b10 	vmov	d0, r3, r4
 8000b56:	f003 fe31 	bl	80047bc <trunc>
 8000b5a:	ec54 3b10 	vmov	r3, r4, d0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	4621      	mov	r1, r4
 8000b62:	f7ff fd49 	bl	80005f8 <__aeabi_d2iz>
 8000b66:	4602      	mov	r2, r0
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b6a:	601a      	str	r2, [r3, #0]

	sprintf(str, "%d,%d [cm] \r\n", di, TurnInt);		//change int variable to char
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4912      	ldr	r1, [pc, #72]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b76:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000b78:	f003 fa1a 	bl	8003fb0 <siprintf>

	if (  HAL_UART_Transmit(&huart2, (char*)str, (size_t)sizeof(str), 100) != HAL_OK)		//transmit via USART
 8000b7c:	2364      	movs	r3, #100	; 0x64
 8000b7e:	220f      	movs	r2, #15
 8000b80:	4910      	ldr	r1, [pc, #64]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000b82:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b84:	f002 fd83 	bl	800368e <HAL_UART_Transmit>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0xca>
	{
		Error_Handler();
 8000b8e:	f000 f86d 	bl	8000c6c <Error_Handler>
	}


	//printf("%f", d);

}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd90      	pop	{r4, r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000098 	.word	0x20000098
 8000ba0:	14f8b589 	.word	0x14f8b589
 8000ba4:	2000008c 	.word	0x2000008c
 8000ba8:	42680000 	.word	0x42680000
 8000bac:	20000090 	.word	0x20000090
 8000bb0:	20000094 	.word	0x20000094
 8000bb4:	200000a8 	.word	0x200000a8
 8000bb8:	42c80000 	.word	0x42c80000
 8000bbc:	200000ac 	.word	0x200000ac
 8000bc0:	08004848 	.word	0x08004848
 8000bc4:	200000bc 	.word	0x200000bc
 8000bc8:	2000014c 	.word	0x2000014c

08000bcc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if (Is_First_Capture == 0)
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10b      	bne.n	8000bf4 <HAL_TIM_IC_CaptureCallback+0x28>
	{
		IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //write the first captured value
 8000bdc:	2100      	movs	r1, #0
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f001 ffe8 	bl	8002bb4 <HAL_TIM_ReadCapturedValue>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000bea:	601a      	str	r2, [r3, #0]
		Is_First_Capture = 1;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Error_Handler();
	}
}
 8000bf2:	e02f      	b.n	8000c54 <HAL_TIM_IC_CaptureCallback+0x88>
	else if (Is_First_Capture == 1)
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d129      	bne.n	8000c50 <HAL_TIM_IC_CaptureCallback+0x84>
		IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //write the second captured value
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f001 ffd8 	bl	8002bb4 <HAL_TIM_ReadCapturedValue>
 8000c04:	4603      	mov	r3, r0
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c0a:	601a      	str	r2, [r3, #0]
		if (IC_Value2 > IC_Value1) 	//the second value is higher than the first
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dd07      	ble.n	8000c28 <HAL_TIM_IC_CaptureCallback+0x5c>
			Difference = IC_Value2 - IC_Value1; //count difference
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e00f      	b.n	8000c48 <HAL_TIM_IC_CaptureCallback+0x7c>
		else if (IC_Value2 < IC_Value1)		//the second value is higher
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	da09      	bge.n	8000c48 <HAL_TIM_IC_CaptureCallback+0x7c>
			Difference = (50000 - IC_Value1) + IC_Value2;	//count diff
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f5c3 4343 	rsb	r3, r3, #49920	; 0xc300
 8000c3c:	3350      	adds	r3, #80	; 0x50
 8000c3e:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000c46:	6013      	str	r3, [r2, #0]
		Is_First_Capture = 0;	//reset captured values
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
}
 8000c4e:	e001      	b.n	8000c54 <HAL_TIM_IC_CaptureCallback+0x88>
		Error_Handler();
 8000c50:	f000 f80c 	bl	8000c6c <Error_Handler>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000009c 	.word	0x2000009c
 8000c60:	200000a0 	.word	0x200000a0
 8000c64:	200000a4 	.word	0x200000a4
 8000c68:	20000098 	.word	0x20000098

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 fb26 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000d2e:	f001 fbbf 	bl	80024b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000010c 	.word	0x2000010c

08000d3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d40:	4803      	ldr	r0, [pc, #12]	; (8000d50 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000d42:	f001 fbb5 	bl	80024b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000d46:	4803      	ldr	r0, [pc, #12]	; (8000d54 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000d48:	f001 fbb2 	bl	80024b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000010c 	.word	0x2000010c
 8000d54:	200000cc 	.word	0x200000cc

08000d58 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000d5e:	f001 fba7 	bl	80024b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000010c 	.word	0x2000010c

08000d6c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <TIM1_CC_IRQHandler+0x10>)
 8000d72:	f001 fb9d 	bl	80024b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000010c 	.word	0x2000010c

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f003 f8cc 	bl	8003f4c <__errno>
 8000db4:	4602      	mov	r2, r0
 8000db6:	230c      	movs	r3, #12
 8000db8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20020000 	.word	0x20020000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	200000b0 	.word	0x200000b0
 8000de8:	20000198 	.word	0x20000198

08000dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <SystemInit+0x28>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <SystemInit+0x28>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SystemInit+0x28>)
 8000e02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e06:	609a      	str	r2, [r3, #8]
#endif
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b09a      	sub	sp, #104	; 0x68
 8000e1c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]
 8000e56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 f89e 	bl	8003fa0 <memset>

  htim1.Instance = TIM1;
 8000e64:	4b57      	ldr	r3, [pc, #348]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000e66:	4a58      	ldr	r2, [pc, #352]	; (8000fc8 <MX_TIM1_Init+0x1b0>)
 8000e68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000e6a:	4b56      	ldr	r3, [pc, #344]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000e6c:	224f      	movs	r2, #79	; 0x4f
 8000e6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8000e76:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000e78:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000e7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7e:	4b51      	ldr	r3, [pc, #324]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e84:	4b4f      	ldr	r3, [pc, #316]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e90:	484c      	ldr	r0, [pc, #304]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000e92:	f001 f983 	bl	800219c <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000e9c:	f7ff fee6 	bl	8000c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ea6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4845      	ldr	r0, [pc, #276]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000eae:	f001 fdc9 	bl	8002a44 <HAL_TIM_ConfigClockSource>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000eb8:	f7ff fed8 	bl	8000c6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000ebc:	4841      	ldr	r0, [pc, #260]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000ebe:	f001 fa59 	bl	8002374 <HAL_TIM_IC_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000ec8:	f7ff fed0 	bl	8000c6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000ecc:	483d      	ldr	r0, [pc, #244]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000ece:	f001 f9b4 	bl	800223a <HAL_TIM_OC_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ed8:	f7ff fec8 	bl	8000c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000edc:	4839      	ldr	r0, [pc, #228]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000ede:	f001 f9e1 	bl	80022a4 <HAL_TIM_PWM_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000ee8:	f7ff fec0 	bl	8000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4832      	ldr	r0, [pc, #200]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000efc:	f002 faa6 	bl	800344c <HAL_TIMEx_MasterConfigSynchronization>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000f06:	f7ff feb1 	bl	8000c6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4619      	mov	r1, r3
 8000f22:	4828      	ldr	r0, [pc, #160]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000f24:	f001 fc2c 	bl	8002780 <HAL_TIM_IC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8000f2e:	f7ff fe9d 	bl	8000c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	2204      	movs	r2, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	481b      	ldr	r0, [pc, #108]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000f58:	f001 fbb2 	bl	80026c0 <HAL_TIM_OC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000f62:	f7ff fe83 	bl	8000c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f66:	2360      	movs	r3, #96	; 0x60
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	2208      	movs	r2, #8
 8000f70:	4619      	mov	r1, r3
 8000f72:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000f74:	f001 fca0 	bl	80028b8 <HAL_TIM_PWM_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000f7e:	f7ff fe75 	bl	8000c6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000fa6:	f002 fabf 	bl	8003528 <HAL_TIMEx_ConfigBreakDeadTime>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 8000fb0:	f7ff fe5c 	bl	8000c6c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <MX_TIM1_Init+0x1ac>)
 8000fb6:	f000 f8b3 	bl	8001120 <HAL_TIM_MspPostInit>

}
 8000fba:	bf00      	nop
 8000fbc:	3768      	adds	r7, #104	; 0x68
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000010c 	.word	0x2000010c
 8000fc8:	40010000 	.word	0x40010000

08000fcc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_TIM10_Init+0x40>)
 8000fd2:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <MX_TIM10_Init+0x44>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1999;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_TIM10_Init+0x40>)
 8000fd8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000fdc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_TIM10_Init+0x40>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49999;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_TIM10_Init+0x40>)
 8000fe6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000fea:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_TIM10_Init+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_TIM10_Init+0x40>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_TIM10_Init+0x40>)
 8000ffa:	f001 f8cf 	bl	800219c <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001004:	f7ff fe32 	bl	8000c6c <Error_Handler>
  }

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000cc 	.word	0x200000cc
 8001010:	40014400 	.word	0x40014400

08001014 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a37      	ldr	r2, [pc, #220]	; (8001110 <HAL_TIM_Base_MspInit+0xfc>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d14d      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <HAL_TIM_Base_MspInit+0x100>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a35      	ldr	r2, [pc, #212]	; (8001114 <HAL_TIM_Base_MspInit+0x100>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b33      	ldr	r3, [pc, #204]	; (8001114 <HAL_TIM_Base_MspInit+0x100>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <HAL_TIM_Base_MspInit+0x100>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a2e      	ldr	r2, [pc, #184]	; (8001114 <HAL_TIM_Base_MspInit+0x100>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <HAL_TIM_Base_MspInit+0x100>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001080:	2301      	movs	r3, #1
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4823      	ldr	r0, [pc, #140]	; (8001118 <HAL_TIM_Base_MspInit+0x104>)
 800108c:	f000 faa2 	bl	80015d4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2018      	movs	r0, #24
 8001096:	f000 fa66 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800109a:	2018      	movs	r0, #24
 800109c:	f000 fa7f 	bl	800159e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	2019      	movs	r0, #25
 80010a6:	f000 fa5e 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010aa:	2019      	movs	r0, #25
 80010ac:	f000 fa77 	bl	800159e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	201a      	movs	r0, #26
 80010b6:	f000 fa56 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80010ba:	201a      	movs	r0, #26
 80010bc:	f000 fa6f 	bl	800159e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	201b      	movs	r0, #27
 80010c6:	f000 fa4e 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010ca:	201b      	movs	r0, #27
 80010cc:	f000 fa67 	bl	800159e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80010d0:	e01a      	b.n	8001108 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM10)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a11      	ldr	r2, [pc, #68]	; (800111c <HAL_TIM_Base_MspInit+0x108>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d115      	bne.n	8001108 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_TIM_Base_MspInit+0x100>)
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_TIM_Base_MspInit+0x100>)
 80010e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ea:	6453      	str	r3, [r2, #68]	; 0x44
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_TIM_Base_MspInit+0x100>)
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2019      	movs	r0, #25
 80010fe:	f000 fa32 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001102:	2019      	movs	r0, #25
 8001104:	f000 fa4b 	bl	800159e <HAL_NVIC_EnableIRQ>
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40010000 	.word	0x40010000
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000
 800111c:	40014400 	.word	0x40014400

08001120 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a12      	ldr	r2, [pc, #72]	; (8001188 <HAL_TIM_MspPostInit+0x68>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d11e      	bne.n	8001180 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_TIM_MspPostInit+0x6c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_TIM_MspPostInit+0x6c>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_TIM_MspPostInit+0x6c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800115e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001162:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001170:	2301      	movs	r3, #1
 8001172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_TIM_MspPostInit+0x70>)
 800117c:	f000 fa2a 	bl	80015d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40010000 	.word	0x40010000
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000

08001194 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_USART2_UART_Init+0x50>)
 800119c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011cc:	f002 fa12 	bl	80035f4 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011d6:	f7ff fd49 	bl	8000c6c <Error_Handler>
  }

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000014c 	.word	0x2000014c
 80011e4:	40004400 	.word	0x40004400

080011e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a19      	ldr	r2, [pc, #100]	; (800126c <HAL_UART_MspInit+0x84>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d12b      	bne.n	8001262 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_UART_MspInit+0x88>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <HAL_UART_MspInit+0x88>)
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_UART_MspInit+0x88>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_UART_MspInit+0x88>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <HAL_UART_MspInit+0x88>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_UART_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001242:	230c      	movs	r3, #12
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001252:	2307      	movs	r3, #7
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_UART_MspInit+0x8c>)
 800125e:	f000 f9b9 	bl	80015d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40004400 	.word	0x40004400
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800127c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800127e:	e003      	b.n	8001288 <LoopCopyDataInit>

08001280 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001282:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001284:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001286:	3104      	adds	r1, #4

08001288 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001288:	480b      	ldr	r0, [pc, #44]	; (80012b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800128c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800128e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001290:	d3f6      	bcc.n	8001280 <CopyDataInit>
  ldr  r2, =_sbss
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001294:	e002      	b.n	800129c <LoopFillZerobss>

08001296 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001296:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001298:	f842 3b04 	str.w	r3, [r2], #4

0800129c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800129e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012a0:	d3f9      	bcc.n	8001296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012a2:	f7ff fda3 	bl	8000dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f002 fe57 	bl	8003f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff fb83 	bl	80009b4 <main>
  bx  lr    
 80012ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012b4:	080048b4 	.word	0x080048b4
  ldr  r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012bc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80012c0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80012c4:	20000194 	.word	0x20000194

080012c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <HAL_Init+0x40>)
 80012d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_Init+0x40>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_Init+0x40>)
 80012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f92b 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff fcbc 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f943 	bl	80015ba <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f90b 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008
 8001394:	2000018c 	.word	0x2000018c

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2000018c 	.word	0x2000018c

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <__NVIC_EnableIRQ+0x38>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff29 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff3e 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff31 	bl	8001414 <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa2 	bl	800150c <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e159      	b.n	80018a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f0:	2201      	movs	r2, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	429a      	cmp	r2, r3
 800160a:	f040 8148 	bne.w	800189e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d00b      	beq.n	800162e <HAL_GPIO_Init+0x5a>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d007      	beq.n	800162e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001622:	2b11      	cmp	r3, #17
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b12      	cmp	r3, #18
 800162c:	d130      	bne.n	8001690 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001664:	2201      	movs	r2, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 0201 	and.w	r2, r3, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0xfc>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b12      	cmp	r3, #18
 80016ce:	d123      	bne.n	8001718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	08da      	lsrs	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3208      	adds	r2, #8
 80016d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	69b9      	ldr	r1, [r7, #24]
 8001714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a2 	beq.w	800189e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b56      	ldr	r3, [pc, #344]	; (80018b8 <HAL_GPIO_Init+0x2e4>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a55      	ldr	r2, [pc, #340]	; (80018b8 <HAL_GPIO_Init+0x2e4>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_GPIO_Init+0x2e4>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001776:	4a51      	ldr	r2, [pc, #324]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a48      	ldr	r2, [pc, #288]	; (80018c0 <HAL_GPIO_Init+0x2ec>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x202>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a47      	ldr	r2, [pc, #284]	; (80018c4 <HAL_GPIO_Init+0x2f0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x1fe>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a46      	ldr	r2, [pc, #280]	; (80018c8 <HAL_GPIO_Init+0x2f4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a45      	ldr	r2, [pc, #276]	; (80018cc <HAL_GPIO_Init+0x2f8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x1f6>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a44      	ldr	r2, [pc, #272]	; (80018d0 <HAL_GPIO_Init+0x2fc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x1f2>
 80017c2:	2304      	movs	r3, #4
 80017c4:	e008      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e004      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017d6:	2300      	movs	r3, #0
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f002 0203 	and.w	r2, r2, #3
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	4093      	lsls	r3, r2
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e8:	4934      	ldr	r1, [pc, #208]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <HAL_GPIO_Init+0x300>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800181a:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <HAL_GPIO_Init+0x300>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001820:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001844:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_GPIO_Init+0x300>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800186e:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_GPIO_Init+0x300>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_GPIO_Init+0x300>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	f67f aea2 	bls.w	80015f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018ac:	bf00      	nop
 80018ae:	3724      	adds	r7, #36	; 0x24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40013800 	.word	0x40013800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020400 	.word	0x40020400
 80018c8:	40020800 	.word	0x40020800
 80018cc:	40020c00 	.word	0x40020c00
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40013c00 	.word	0x40013c00

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e25b      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d075      	beq.n	80019e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018f6:	4ba3      	ldr	r3, [pc, #652]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d00c      	beq.n	800191c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001902:	4ba0      	ldr	r3, [pc, #640]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800190a:	2b08      	cmp	r3, #8
 800190c:	d112      	bne.n	8001934 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190e:	4b9d      	ldr	r3, [pc, #628]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800191a:	d10b      	bne.n	8001934 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	4b99      	ldr	r3, [pc, #612]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d05b      	beq.n	80019e0 <HAL_RCC_OscConfig+0x108>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d157      	bne.n	80019e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e236      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d106      	bne.n	800194c <HAL_RCC_OscConfig+0x74>
 800193e:	4b91      	ldr	r3, [pc, #580]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a90      	ldr	r2, [pc, #576]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0xb0>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x98>
 8001956:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a8a      	ldr	r2, [pc, #552]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a87      	ldr	r2, [pc, #540]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xb0>
 8001970:	4b84      	ldr	r3, [pc, #528]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a83      	ldr	r2, [pc, #524]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b81      	ldr	r3, [pc, #516]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a80      	ldr	r2, [pc, #512]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fd02 	bl	8001398 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fcfe 	bl	8001398 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1fb      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xc0>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fcee 	bl	8001398 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fcea 	bl	8001398 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1e7      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	4b6c      	ldr	r3, [pc, #432]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0xe8>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ee:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fa:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x152>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1bb      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4952      	ldr	r1, [pc, #328]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b4f      	ldr	r3, [pc, #316]	; (8001b88 <HAL_RCC_OscConfig+0x2b0>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fca3 	bl	8001398 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fc9f 	bl	8001398 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e19c      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4940      	ldr	r1, [pc, #256]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_RCC_OscConfig+0x2b0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff fc82 	bl	8001398 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fc7e 	bl	8001398 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e17b      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d030      	beq.n	8001b24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d016      	beq.n	8001af8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_RCC_OscConfig+0x2b4>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fc62 	bl	8001398 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fc5e 	bl	8001398 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e15b      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x200>
 8001af6:	e015      	b.n	8001b24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_RCC_OscConfig+0x2b4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7ff fc4b 	bl	8001398 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b06:	f7ff fc47 	bl	8001398 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e144      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a0 	beq.w	8001c72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d121      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fc0d 	bl	8001398 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	e011      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2ce>
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	42470000 	.word	0x42470000
 8001b8c:	42470e80 	.word	0x42470e80
 8001b90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b94:	f7ff fc00 	bl	8001398 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e0fd      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba6:	4b81      	ldr	r3, [pc, #516]	; (8001dac <HAL_RCC_OscConfig+0x4d4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2f0>
 8001bba:	4b7d      	ldr	r3, [pc, #500]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	4a7c      	ldr	r2, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc6:	e01c      	b.n	8001c02 <HAL_RCC_OscConfig+0x32a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d10c      	bne.n	8001bea <HAL_RCC_OscConfig+0x312>
 8001bd0:	4b77      	ldr	r3, [pc, #476]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a76      	ldr	r2, [pc, #472]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
 8001bdc:	4b74      	ldr	r3, [pc, #464]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	4a73      	ldr	r2, [pc, #460]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6713      	str	r3, [r2, #112]	; 0x70
 8001be8:	e00b      	b.n	8001c02 <HAL_RCC_OscConfig+0x32a>
 8001bea:	4b71      	ldr	r3, [pc, #452]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	4a70      	ldr	r2, [pc, #448]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf6:	4b6e      	ldr	r3, [pc, #440]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	4a6d      	ldr	r2, [pc, #436]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d015      	beq.n	8001c36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fbc5 	bl	8001398 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff fbc1 	bl	8001398 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0bc      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c28:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ee      	beq.n	8001c12 <HAL_RCC_OscConfig+0x33a>
 8001c34:	e014      	b.n	8001c60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fbaf 	bl	8001398 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7ff fbab 	bl	8001398 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0a6      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	4b56      	ldr	r3, [pc, #344]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c66:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a51      	ldr	r2, [pc, #324]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8092 	beq.w	8001da0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7c:	4b4c      	ldr	r3, [pc, #304]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d05c      	beq.n	8001d42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d141      	bne.n	8001d14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <HAL_RCC_OscConfig+0x4dc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fb7f 	bl	8001398 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff fb7b 	bl	8001398 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e078      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb0:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	019b      	lsls	r3, r3, #6
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	061b      	lsls	r3, r3, #24
 8001ce0:	4933      	ldr	r1, [pc, #204]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce6:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <HAL_RCC_OscConfig+0x4dc>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fb54 	bl	8001398 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff fb50 	bl	8001398 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e04d      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x41c>
 8001d12:	e045      	b.n	8001da0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_RCC_OscConfig+0x4dc>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff fb3d 	bl	8001398 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d22:	f7ff fb39 	bl	8001398 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e036      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x44a>
 8001d40:	e02e      	b.n	8001da0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e029      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d11c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d115      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d76:	4013      	ands	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d10d      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40007000 	.word	0x40007000
 8001db0:	40023800 	.word	0x40023800
 8001db4:	42470060 	.word	0x42470060

08001db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0cc      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d90c      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b65      	ldr	r3, [pc, #404]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0b8      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e0c:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e24:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a52      	ldr	r2, [pc, #328]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b50      	ldr	r3, [pc, #320]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	494d      	ldr	r1, [pc, #308]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d044      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d119      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e07f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e06f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e067      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4934      	ldr	r1, [pc, #208]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea8:	f7ff fa76 	bl	8001398 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7ff fa72 	bl	8001398 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e04f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d20c      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e032      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4916      	ldr	r1, [pc, #88]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	490e      	ldr	r1, [pc, #56]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f3e:	f000 f821 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8001f42:	4601      	mov	r1, r0
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	fa21 f303 	lsr.w	r3, r1, r3
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f9d6 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00
 8001f74:	40023800 	.word	0x40023800
 8001f78:	08004858 	.word	0x08004858
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000004 	.word	0x20000004

08001f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d007      	beq.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x32>
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d008      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x38>
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 80b4 	bne.w	8002118 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b5e      	ldr	r3, [pc, #376]	; (800212c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fb2:	60bb      	str	r3, [r7, #8]
       break;
 8001fb4:	e0b3      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fb6:	4b5e      	ldr	r3, [pc, #376]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001fb8:	60bb      	str	r3, [r7, #8]
      break;
 8001fba:	e0b0      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fbc:	4b5a      	ldr	r3, [pc, #360]	; (8002128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc6:	4b58      	ldr	r3, [pc, #352]	; (8002128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d04a      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd2:	4b55      	ldr	r3, [pc, #340]	; (8002128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	099b      	lsrs	r3, r3, #6
 8001fd8:	f04f 0400 	mov.w	r4, #0
 8001fdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	ea03 0501 	and.w	r5, r3, r1
 8001fe8:	ea04 0602 	and.w	r6, r4, r2
 8001fec:	4629      	mov	r1, r5
 8001fee:	4632      	mov	r2, r6
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	f04f 0400 	mov.w	r4, #0
 8001ff8:	0154      	lsls	r4, r2, #5
 8001ffa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ffe:	014b      	lsls	r3, r1, #5
 8002000:	4619      	mov	r1, r3
 8002002:	4622      	mov	r2, r4
 8002004:	1b49      	subs	r1, r1, r5
 8002006:	eb62 0206 	sbc.w	r2, r2, r6
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	f04f 0400 	mov.w	r4, #0
 8002012:	0194      	lsls	r4, r2, #6
 8002014:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002018:	018b      	lsls	r3, r1, #6
 800201a:	1a5b      	subs	r3, r3, r1
 800201c:	eb64 0402 	sbc.w	r4, r4, r2
 8002020:	f04f 0100 	mov.w	r1, #0
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	00e2      	lsls	r2, r4, #3
 800202a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800202e:	00d9      	lsls	r1, r3, #3
 8002030:	460b      	mov	r3, r1
 8002032:	4614      	mov	r4, r2
 8002034:	195b      	adds	r3, r3, r5
 8002036:	eb44 0406 	adc.w	r4, r4, r6
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	0262      	lsls	r2, r4, #9
 8002044:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002048:	0259      	lsls	r1, r3, #9
 800204a:	460b      	mov	r3, r1
 800204c:	4614      	mov	r4, r2
 800204e:	4618      	mov	r0, r3
 8002050:	4621      	mov	r1, r4
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f04f 0400 	mov.w	r4, #0
 8002058:	461a      	mov	r2, r3
 800205a:	4623      	mov	r3, r4
 800205c:	f7fe faf4 	bl	8000648 <__aeabi_uldivmod>
 8002060:	4603      	mov	r3, r0
 8002062:	460c      	mov	r4, r1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	e049      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002068:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	f04f 0400 	mov.w	r4, #0
 8002072:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	ea03 0501 	and.w	r5, r3, r1
 800207e:	ea04 0602 	and.w	r6, r4, r2
 8002082:	4629      	mov	r1, r5
 8002084:	4632      	mov	r2, r6
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	f04f 0400 	mov.w	r4, #0
 800208e:	0154      	lsls	r4, r2, #5
 8002090:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002094:	014b      	lsls	r3, r1, #5
 8002096:	4619      	mov	r1, r3
 8002098:	4622      	mov	r2, r4
 800209a:	1b49      	subs	r1, r1, r5
 800209c:	eb62 0206 	sbc.w	r2, r2, r6
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	f04f 0400 	mov.w	r4, #0
 80020a8:	0194      	lsls	r4, r2, #6
 80020aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020ae:	018b      	lsls	r3, r1, #6
 80020b0:	1a5b      	subs	r3, r3, r1
 80020b2:	eb64 0402 	sbc.w	r4, r4, r2
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	00e2      	lsls	r2, r4, #3
 80020c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020c4:	00d9      	lsls	r1, r3, #3
 80020c6:	460b      	mov	r3, r1
 80020c8:	4614      	mov	r4, r2
 80020ca:	195b      	adds	r3, r3, r5
 80020cc:	eb44 0406 	adc.w	r4, r4, r6
 80020d0:	f04f 0100 	mov.w	r1, #0
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	02a2      	lsls	r2, r4, #10
 80020da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020de:	0299      	lsls	r1, r3, #10
 80020e0:	460b      	mov	r3, r1
 80020e2:	4614      	mov	r4, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	4621      	mov	r1, r4
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f04f 0400 	mov.w	r4, #0
 80020ee:	461a      	mov	r2, r3
 80020f0:	4623      	mov	r3, r4
 80020f2:	f7fe faa9 	bl	8000648 <__aeabi_uldivmod>
 80020f6:	4603      	mov	r3, r0
 80020f8:	460c      	mov	r4, r1
 80020fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	3301      	adds	r3, #1
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	60bb      	str	r3, [r7, #8]
      break;
 8002116:	e002      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800211a:	60bb      	str	r3, [r7, #8]
      break;
 800211c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211e:	68bb      	ldr	r3, [r7, #8]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002128:	40023800 	.word	0x40023800
 800212c:	00f42400 	.word	0x00f42400
 8002130:	007a1200 	.word	0x007a1200

08002134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_RCC_GetHCLKFreq+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000000 	.word	0x20000000

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002150:	f7ff fff0 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8002154:	4601      	mov	r1, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	0a9b      	lsrs	r3, r3, #10
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4a03      	ldr	r2, [pc, #12]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40023800 	.word	0x40023800
 8002170:	08004868 	.word	0x08004868

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002178:	f7ff ffdc 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 800217c:	4601      	mov	r1, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	0b5b      	lsrs	r3, r3, #13
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4a03      	ldr	r2, [pc, #12]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800
 8002198:	08004868 	.word	0x08004868

0800219c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e01d      	b.n	80021ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe ff26 	bl	8001014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3304      	adds	r3, #4
 80021d8:	4619      	mov	r1, r3
 80021da:	4610      	mov	r0, r2
 80021dc:	f000 fd4c 	bl	8002c78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b06      	cmp	r3, #6
 800221a:	d007      	beq.n	800222c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e01d      	b.n	8002288 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f815 	bl	8002290 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2202      	movs	r2, #2
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	4619      	mov	r1, r3
 8002278:	4610      	mov	r0, r2
 800227a:	f000 fcfd 	bl	8002c78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e01d      	b.n	80022f2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f815 	bl	80022fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3304      	adds	r3, #4
 80022e0:	4619      	mov	r1, r3
 80022e2:	4610      	mov	r0, r2
 80022e4:	f000 fcc8 	bl	8002c78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2201      	movs	r2, #1
 8002320:	6839      	ldr	r1, [r7, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f001 f86c 	bl	8003400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a10      	ldr	r2, [pc, #64]	; (8002370 <HAL_TIM_PWM_Start+0x60>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d107      	bne.n	8002342 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b06      	cmp	r3, #6
 8002352:	d007      	beq.n	8002364 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40010000 	.word	0x40010000

08002374 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e01d      	b.n	80023c2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f815 	bl	80023ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3304      	adds	r3, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f000 fc60 	bl	8002c78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d841      	bhi.n	8002474 <HAL_TIM_IC_Start_IT+0x94>
 80023f0:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <HAL_TIM_IC_Start_IT+0x18>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	0800242d 	.word	0x0800242d
 80023fc:	08002475 	.word	0x08002475
 8002400:	08002475 	.word	0x08002475
 8002404:	08002475 	.word	0x08002475
 8002408:	0800243f 	.word	0x0800243f
 800240c:	08002475 	.word	0x08002475
 8002410:	08002475 	.word	0x08002475
 8002414:	08002475 	.word	0x08002475
 8002418:	08002451 	.word	0x08002451
 800241c:	08002475 	.word	0x08002475
 8002420:	08002475 	.word	0x08002475
 8002424:	08002475 	.word	0x08002475
 8002428:	08002463 	.word	0x08002463
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0202 	orr.w	r2, r2, #2
 800243a:	60da      	str	r2, [r3, #12]
      break;
 800243c:	e01b      	b.n	8002476 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0204 	orr.w	r2, r2, #4
 800244c:	60da      	str	r2, [r3, #12]
      break;
 800244e:	e012      	b.n	8002476 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0208 	orr.w	r2, r2, #8
 800245e:	60da      	str	r2, [r3, #12]
      break;
 8002460:	e009      	b.n	8002476 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0210 	orr.w	r2, r2, #16
 8002470:	60da      	str	r2, [r3, #12]
      break;
 8002472:	e000      	b.n	8002476 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002474:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2201      	movs	r2, #1
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 ffbe 	bl	8003400 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b06      	cmp	r3, #6
 8002494:	d007      	beq.n	80024a6 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d122      	bne.n	800250c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d11b      	bne.n	800250c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0202 	mvn.w	r2, #2
 80024dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fb6a 	bl	8000bcc <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fb9e 	bl	8002c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fba5 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d122      	bne.n	8002560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b04      	cmp	r3, #4
 8002526:	d11b      	bne.n	8002560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0204 	mvn.w	r2, #4
 8002530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fb40 	bl	8000bcc <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fb74 	bl	8002c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fb7b 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b08      	cmp	r3, #8
 800256c:	d122      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b08      	cmp	r3, #8
 800257a:	d11b      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0208 	mvn.w	r2, #8
 8002584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2204      	movs	r2, #4
 800258a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe fb16 	bl	8000bcc <HAL_TIM_IC_CaptureCallback>
 80025a0:	e005      	b.n	80025ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fb4a 	bl	8002c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fb51 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d122      	bne.n	8002608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d11b      	bne.n	8002608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0210 	mvn.w	r2, #16
 80025d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2208      	movs	r2, #8
 80025de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe faec 	bl	8000bcc <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fb20 	bl	8002c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fb27 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0201 	mvn.w	r2, #1
 800262c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fa4a 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d107      	bne.n	8002660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 ffc0 	bl	80035e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d10e      	bne.n	800268c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d107      	bne.n	800268c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 faec 	bl	8002c64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b20      	cmp	r3, #32
 8002698:	d10e      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d107      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0220 	mvn.w	r2, #32
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 ff8a 	bl	80035cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_TIM_OC_ConfigChannel+0x1a>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e04e      	b.n	8002778 <HAL_TIM_OC_ConfigChannel+0xb8>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0c      	cmp	r3, #12
 80026ee:	d839      	bhi.n	8002764 <HAL_TIM_OC_ConfigChannel+0xa4>
 80026f0:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80026f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f6:	bf00      	nop
 80026f8:	0800272d 	.word	0x0800272d
 80026fc:	08002765 	.word	0x08002765
 8002700:	08002765 	.word	0x08002765
 8002704:	08002765 	.word	0x08002765
 8002708:	0800273b 	.word	0x0800273b
 800270c:	08002765 	.word	0x08002765
 8002710:	08002765 	.word	0x08002765
 8002714:	08002765 	.word	0x08002765
 8002718:	08002749 	.word	0x08002749
 800271c:	08002765 	.word	0x08002765
 8002720:	08002765 	.word	0x08002765
 8002724:	08002765 	.word	0x08002765
 8002728:	08002757 	.word	0x08002757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fb20 	bl	8002d78 <TIM_OC1_SetConfig>
      break;
 8002738:	e015      	b.n	8002766 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fb7f 	bl	8002e44 <TIM_OC2_SetConfig>
      break;
 8002746:	e00e      	b.n	8002766 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fbe4 	bl	8002f1c <TIM_OC3_SetConfig>
      break;
 8002754:	e007      	b.n	8002766 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fc47 	bl	8002ff0 <TIM_OC4_SetConfig>
      break;
 8002762:	e000      	b.n	8002766 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8002764:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_TIM_IC_ConfigChannel+0x1a>
 8002796:	2302      	movs	r3, #2
 8002798:	e08a      	b.n	80028b0 <HAL_TIM_IC_ConfigChannel+0x130>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2202      	movs	r2, #2
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d11b      	bne.n	80027e8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f000 fc66 	bl	8003090 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 020c 	bic.w	r2, r2, #12
 80027d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6999      	ldr	r1, [r3, #24]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	619a      	str	r2, [r3, #24]
 80027e6:	e05a      	b.n	800289e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d11c      	bne.n	8002828 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	6819      	ldr	r1, [r3, #0]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f000 fcde 	bl	80031be <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002810:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6999      	ldr	r1, [r3, #24]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	021a      	lsls	r2, r3, #8
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	619a      	str	r2, [r3, #24]
 8002826:	e03a      	b.n	800289e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b08      	cmp	r3, #8
 800282c:	d11b      	bne.n	8002866 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	6819      	ldr	r1, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f000 fd2b 	bl	8003298 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 020c 	bic.w	r2, r2, #12
 8002850:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69d9      	ldr	r1, [r3, #28]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	61da      	str	r2, [r3, #28]
 8002864:	e01b      	b.n	800289e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	6819      	ldr	r1, [r3, #0]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f000 fd4b 	bl	8003310 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002888:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69d9      	ldr	r1, [r3, #28]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	021a      	lsls	r2, r3, #8
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e0b4      	b.n	8002a3c <HAL_TIM_PWM_ConfigChannel+0x184>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2202      	movs	r2, #2
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	f200 809f 	bhi.w	8002a28 <HAL_TIM_PWM_ConfigChannel+0x170>
 80028ea:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	08002925 	.word	0x08002925
 80028f4:	08002a29 	.word	0x08002a29
 80028f8:	08002a29 	.word	0x08002a29
 80028fc:	08002a29 	.word	0x08002a29
 8002900:	08002965 	.word	0x08002965
 8002904:	08002a29 	.word	0x08002a29
 8002908:	08002a29 	.word	0x08002a29
 800290c:	08002a29 	.word	0x08002a29
 8002910:	080029a7 	.word	0x080029a7
 8002914:	08002a29 	.word	0x08002a29
 8002918:	08002a29 	.word	0x08002a29
 800291c:	08002a29 	.word	0x08002a29
 8002920:	080029e7 	.word	0x080029e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fa24 	bl	8002d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0208 	orr.w	r2, r2, #8
 800293e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0204 	bic.w	r2, r2, #4
 800294e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6999      	ldr	r1, [r3, #24]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	619a      	str	r2, [r3, #24]
      break;
 8002962:	e062      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fa6a 	bl	8002e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6999      	ldr	r1, [r3, #24]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	021a      	lsls	r2, r3, #8
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	619a      	str	r2, [r3, #24]
      break;
 80029a4:	e041      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fab5 	bl	8002f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0208 	orr.w	r2, r2, #8
 80029c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0204 	bic.w	r2, r2, #4
 80029d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69d9      	ldr	r1, [r3, #28]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	61da      	str	r2, [r3, #28]
      break;
 80029e4:	e021      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 faff 	bl	8002ff0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69d9      	ldr	r1, [r3, #28]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	021a      	lsls	r2, r3, #8
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	61da      	str	r2, [r3, #28]
      break;
 8002a26:	e000      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a28:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_TIM_ConfigClockSource+0x18>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e0a6      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x166>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b40      	cmp	r3, #64	; 0x40
 8002a92:	d067      	beq.n	8002b64 <HAL_TIM_ConfigClockSource+0x120>
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	d80b      	bhi.n	8002ab0 <HAL_TIM_ConfigClockSource+0x6c>
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d073      	beq.n	8002b84 <HAL_TIM_ConfigClockSource+0x140>
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d802      	bhi.n	8002aa6 <HAL_TIM_ConfigClockSource+0x62>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d06f      	beq.n	8002b84 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002aa4:	e078      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d06c      	beq.n	8002b84 <HAL_TIM_ConfigClockSource+0x140>
 8002aaa:	2b30      	cmp	r3, #48	; 0x30
 8002aac:	d06a      	beq.n	8002b84 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002aae:	e073      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ab0:	2b70      	cmp	r3, #112	; 0x70
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_TIM_ConfigClockSource+0x8c>
 8002ab4:	2b70      	cmp	r3, #112	; 0x70
 8002ab6:	d804      	bhi.n	8002ac2 <HAL_TIM_ConfigClockSource+0x7e>
 8002ab8:	2b50      	cmp	r3, #80	; 0x50
 8002aba:	d033      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0xe0>
 8002abc:	2b60      	cmp	r3, #96	; 0x60
 8002abe:	d041      	beq.n	8002b44 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ac0:	e06a      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac6:	d066      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x152>
 8002ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002acc:	d017      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002ace:	e063      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6899      	ldr	r1, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f000 fc6e 	bl	80033c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002af2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]
      break;
 8002afc:	e04c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6899      	ldr	r1, [r3, #8]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f000 fc57 	bl	80033c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b20:	609a      	str	r2, [r3, #8]
      break;
 8002b22:	e039      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	461a      	mov	r2, r3
 8002b32:	f000 fb15 	bl	8003160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2150      	movs	r1, #80	; 0x50
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fc24 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8002b42:	e029      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f000 fb71 	bl	8003238 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2160      	movs	r1, #96	; 0x60
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fc14 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8002b62:	e019      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	461a      	mov	r2, r3
 8002b72:	f000 faf5 	bl	8003160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2140      	movs	r1, #64	; 0x40
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fc04 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8002b82:	e009      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f000 fbfb 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8002b94:	e000      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b0c      	cmp	r3, #12
 8002bc6:	d831      	bhi.n	8002c2c <HAL_TIM_ReadCapturedValue+0x78>
 8002bc8:	a201      	add	r2, pc, #4	; (adr r2, 8002bd0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bce:	bf00      	nop
 8002bd0:	08002c05 	.word	0x08002c05
 8002bd4:	08002c2d 	.word	0x08002c2d
 8002bd8:	08002c2d 	.word	0x08002c2d
 8002bdc:	08002c2d 	.word	0x08002c2d
 8002be0:	08002c0f 	.word	0x08002c0f
 8002be4:	08002c2d 	.word	0x08002c2d
 8002be8:	08002c2d 	.word	0x08002c2d
 8002bec:	08002c2d 	.word	0x08002c2d
 8002bf0:	08002c19 	.word	0x08002c19
 8002bf4:	08002c2d 	.word	0x08002c2d
 8002bf8:	08002c2d 	.word	0x08002c2d
 8002bfc:	08002c2d 	.word	0x08002c2d
 8002c00:	08002c23 	.word	0x08002c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0a:	60fb      	str	r3, [r7, #12]

      break;
 8002c0c:	e00f      	b.n	8002c2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	60fb      	str	r3, [r7, #12]

      break;
 8002c16:	e00a      	b.n	8002c2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	60fb      	str	r3, [r7, #12]

      break;
 8002c20:	e005      	b.n	8002c2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	60fb      	str	r3, [r7, #12]

      break;
 8002c2a:	e000      	b.n	8002c2e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002c2c:	bf00      	nop
  }

  return tmpreg;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a34      	ldr	r2, [pc, #208]	; (8002d5c <TIM_Base_SetConfig+0xe4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00f      	beq.n	8002cb0 <TIM_Base_SetConfig+0x38>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c96:	d00b      	beq.n	8002cb0 <TIM_Base_SetConfig+0x38>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a31      	ldr	r2, [pc, #196]	; (8002d60 <TIM_Base_SetConfig+0xe8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d007      	beq.n	8002cb0 <TIM_Base_SetConfig+0x38>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a30      	ldr	r2, [pc, #192]	; (8002d64 <TIM_Base_SetConfig+0xec>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d003      	beq.n	8002cb0 <TIM_Base_SetConfig+0x38>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a2f      	ldr	r2, [pc, #188]	; (8002d68 <TIM_Base_SetConfig+0xf0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d108      	bne.n	8002cc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <TIM_Base_SetConfig+0xe4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01b      	beq.n	8002d02 <TIM_Base_SetConfig+0x8a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd0:	d017      	beq.n	8002d02 <TIM_Base_SetConfig+0x8a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a22      	ldr	r2, [pc, #136]	; (8002d60 <TIM_Base_SetConfig+0xe8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <TIM_Base_SetConfig+0x8a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a21      	ldr	r2, [pc, #132]	; (8002d64 <TIM_Base_SetConfig+0xec>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00f      	beq.n	8002d02 <TIM_Base_SetConfig+0x8a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <TIM_Base_SetConfig+0xf0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00b      	beq.n	8002d02 <TIM_Base_SetConfig+0x8a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <TIM_Base_SetConfig+0xf4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <TIM_Base_SetConfig+0x8a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <TIM_Base_SetConfig+0xf8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d003      	beq.n	8002d02 <TIM_Base_SetConfig+0x8a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <TIM_Base_SetConfig+0xfc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d108      	bne.n	8002d14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <TIM_Base_SetConfig+0xe4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d103      	bne.n	8002d48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	615a      	str	r2, [r3, #20]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40000800 	.word	0x40000800
 8002d68:	40000c00 	.word	0x40000c00
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	40014400 	.word	0x40014400
 8002d74:	40014800 	.word	0x40014800

08002d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f023 0302 	bic.w	r3, r3, #2
 8002dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a1c      	ldr	r2, [pc, #112]	; (8002e40 <TIM_OC1_SetConfig+0xc8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10c      	bne.n	8002dee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f023 0308 	bic.w	r3, r3, #8
 8002dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f023 0304 	bic.w	r3, r3, #4
 8002dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <TIM_OC1_SetConfig+0xc8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d111      	bne.n	8002e1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	621a      	str	r2, [r3, #32]
}
 8002e34:	bf00      	nop
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40010000 	.word	0x40010000

08002e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f023 0210 	bic.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f023 0320 	bic.w	r3, r3, #32
 8002e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <TIM_OC2_SetConfig+0xd4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10d      	bne.n	8002ec0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ebe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a15      	ldr	r2, [pc, #84]	; (8002f18 <TIM_OC2_SetConfig+0xd4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d113      	bne.n	8002ef0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ece:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40010000 	.word	0x40010000

08002f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <TIM_OC3_SetConfig+0xd0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10d      	bne.n	8002f96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a14      	ldr	r2, [pc, #80]	; (8002fec <TIM_OC3_SetConfig+0xd0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d113      	bne.n	8002fc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	621a      	str	r2, [r3, #32]
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40010000 	.word	0x40010000

08002ff0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800303a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	031b      	lsls	r3, r3, #12
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a10      	ldr	r2, [pc, #64]	; (800308c <TIM_OC4_SetConfig+0x9c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d109      	bne.n	8003064 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003056:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	019b      	lsls	r3, r3, #6
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	621a      	str	r2, [r3, #32]
}
 800307e:	bf00      	nop
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40010000 	.word	0x40010000

08003090 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 0201 	bic.w	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4a24      	ldr	r2, [pc, #144]	; (800314c <TIM_TI1_SetConfig+0xbc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <TIM_TI1_SetConfig+0x56>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c4:	d00f      	beq.n	80030e6 <TIM_TI1_SetConfig+0x56>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a21      	ldr	r2, [pc, #132]	; (8003150 <TIM_TI1_SetConfig+0xc0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00b      	beq.n	80030e6 <TIM_TI1_SetConfig+0x56>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a20      	ldr	r2, [pc, #128]	; (8003154 <TIM_TI1_SetConfig+0xc4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d007      	beq.n	80030e6 <TIM_TI1_SetConfig+0x56>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a1f      	ldr	r2, [pc, #124]	; (8003158 <TIM_TI1_SetConfig+0xc8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d003      	beq.n	80030e6 <TIM_TI1_SetConfig+0x56>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a1e      	ldr	r2, [pc, #120]	; (800315c <TIM_TI1_SetConfig+0xcc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <TIM_TI1_SetConfig+0x5a>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <TIM_TI1_SetConfig+0x5c>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	e003      	b.n	800310a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	b2db      	uxtb	r3, r3
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f023 030a 	bic.w	r3, r3, #10
 8003124:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f003 030a 	and.w	r3, r3, #10
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	621a      	str	r2, [r3, #32]
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40010000 	.word	0x40010000
 8003150:	40000400 	.word	0x40000400
 8003154:	40000800 	.word	0x40000800
 8003158:	40000c00 	.word	0x40000c00
 800315c:	40014000 	.word	0x40014000

08003160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f023 0201 	bic.w	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800318a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f023 030a 	bic.w	r3, r3, #10
 800319c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031be:	b480      	push	{r7}
 80031c0:	b087      	sub	sp, #28
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f023 0210 	bic.w	r2, r3, #16
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	031b      	lsls	r3, r3, #12
 8003202:	b29b      	uxth	r3, r3
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003210:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	621a      	str	r2, [r3, #32]
}
 800322c:	bf00      	nop
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f023 0210 	bic.w	r2, r3, #16
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003262:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	031b      	lsls	r3, r3, #12
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003274:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	621a      	str	r2, [r3, #32]
}
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f023 0303 	bic.w	r3, r3, #3
 80032c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80032e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	621a      	str	r2, [r3, #32]
}
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800334e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	031b      	lsls	r3, r3, #12
 8003354:	b29b      	uxth	r3, r3
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003362:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	031b      	lsls	r3, r3, #12
 8003368:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f043 0307 	orr.w	r3, r3, #7
 80033ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	021a      	lsls	r2, r3, #8
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	609a      	str	r2, [r3, #8]
}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	2201      	movs	r2, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1a      	ldr	r2, [r3, #32]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	43db      	mvns	r3, r3
 8003422:	401a      	ands	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1a      	ldr	r2, [r3, #32]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	431a      	orrs	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003460:	2302      	movs	r3, #2
 8003462:	e050      	b.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d018      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d013      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00e      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a15      	ldr	r2, [pc, #84]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a13      	ldr	r2, [pc, #76]	; (8003524 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10c      	bne.n	80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40010000 	.word	0x40010000
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40000c00 	.word	0x40000c00
 8003524:	40014000 	.word	0x40014000

08003528 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003540:	2302      	movs	r3, #2
 8003542:	e03d      	b.n	80035c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e03f      	b.n	8003686 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fde4 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2224      	movs	r2, #36	; 0x24
 8003624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f90b 	bl	8003854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800364c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800365c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800366c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b088      	sub	sp, #32
 8003692:	af02      	add	r7, sp, #8
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	f040 8083 	bne.w	80037b6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_UART_Transmit+0x2e>
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e07b      	b.n	80037b8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Transmit+0x40>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e074      	b.n	80037b8 <HAL_UART_Transmit+0x12a>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2221      	movs	r2, #33	; 0x21
 80036e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036e4:	f7fd fe58 	bl	8001398 <HAL_GetTick>
 80036e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	88fa      	ldrh	r2, [r7, #6]
 80036ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80036fe:	e042      	b.n	8003786 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003716:	d122      	bne.n	800375e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2200      	movs	r2, #0
 8003720:	2180      	movs	r1, #128	; 0x80
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f84c 	bl	80037c0 <UART_WaitOnFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e042      	b.n	80037b8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003744:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	3302      	adds	r3, #2
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	e017      	b.n	8003786 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	3301      	adds	r3, #1
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	e013      	b.n	8003786 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2200      	movs	r2, #0
 8003766:	2180      	movs	r1, #128	; 0x80
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f829 	bl	80037c0 <UART_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e01f      	b.n	80037b8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	60ba      	str	r2, [r7, #8]
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1b7      	bne.n	8003700 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2200      	movs	r2, #0
 8003798:	2140      	movs	r1, #64	; 0x40
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f810 	bl	80037c0 <UART_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e006      	b.n	80037b8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d0:	e02c      	b.n	800382c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d028      	beq.n	800382c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80037e0:	f7fd fdda 	bl	8001398 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d21d      	bcs.n	800382c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e00f      	b.n	800384c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	429a      	cmp	r2, r3
 8003848:	d0c3      	beq.n	80037d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003858:	b085      	sub	sp, #20
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003896:	f023 030c 	bic.w	r3, r3, #12
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	68f9      	ldr	r1, [r7, #12]
 80038a0:	430b      	orrs	r3, r1
 80038a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c2:	f040 818b 	bne.w	8003bdc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4ac1      	ldr	r2, [pc, #772]	; (8003bd0 <UART_SetConfig+0x37c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d005      	beq.n	80038dc <UART_SetConfig+0x88>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4abf      	ldr	r2, [pc, #764]	; (8003bd4 <UART_SetConfig+0x380>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	f040 80bd 	bne.w	8003a56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038dc:	f7fe fc4a 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 80038e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	461d      	mov	r5, r3
 80038e6:	f04f 0600 	mov.w	r6, #0
 80038ea:	46a8      	mov	r8, r5
 80038ec:	46b1      	mov	r9, r6
 80038ee:	eb18 0308 	adds.w	r3, r8, r8
 80038f2:	eb49 0409 	adc.w	r4, r9, r9
 80038f6:	4698      	mov	r8, r3
 80038f8:	46a1      	mov	r9, r4
 80038fa:	eb18 0805 	adds.w	r8, r8, r5
 80038fe:	eb49 0906 	adc.w	r9, r9, r6
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800390e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003912:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003916:	4688      	mov	r8, r1
 8003918:	4691      	mov	r9, r2
 800391a:	eb18 0005 	adds.w	r0, r8, r5
 800391e:	eb49 0106 	adc.w	r1, r9, r6
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	461d      	mov	r5, r3
 8003928:	f04f 0600 	mov.w	r6, #0
 800392c:	196b      	adds	r3, r5, r5
 800392e:	eb46 0406 	adc.w	r4, r6, r6
 8003932:	461a      	mov	r2, r3
 8003934:	4623      	mov	r3, r4
 8003936:	f7fc fe87 	bl	8000648 <__aeabi_uldivmod>
 800393a:	4603      	mov	r3, r0
 800393c:	460c      	mov	r4, r1
 800393e:	461a      	mov	r2, r3
 8003940:	4ba5      	ldr	r3, [pc, #660]	; (8003bd8 <UART_SetConfig+0x384>)
 8003942:	fba3 2302 	umull	r2, r3, r3, r2
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	461d      	mov	r5, r3
 8003950:	f04f 0600 	mov.w	r6, #0
 8003954:	46a9      	mov	r9, r5
 8003956:	46b2      	mov	sl, r6
 8003958:	eb19 0309 	adds.w	r3, r9, r9
 800395c:	eb4a 040a 	adc.w	r4, sl, sl
 8003960:	4699      	mov	r9, r3
 8003962:	46a2      	mov	sl, r4
 8003964:	eb19 0905 	adds.w	r9, r9, r5
 8003968:	eb4a 0a06 	adc.w	sl, sl, r6
 800396c:	f04f 0100 	mov.w	r1, #0
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003978:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800397c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003980:	4689      	mov	r9, r1
 8003982:	4692      	mov	sl, r2
 8003984:	eb19 0005 	adds.w	r0, r9, r5
 8003988:	eb4a 0106 	adc.w	r1, sl, r6
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	461d      	mov	r5, r3
 8003992:	f04f 0600 	mov.w	r6, #0
 8003996:	196b      	adds	r3, r5, r5
 8003998:	eb46 0406 	adc.w	r4, r6, r6
 800399c:	461a      	mov	r2, r3
 800399e:	4623      	mov	r3, r4
 80039a0:	f7fc fe52 	bl	8000648 <__aeabi_uldivmod>
 80039a4:	4603      	mov	r3, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b8b      	ldr	r3, [pc, #556]	; (8003bd8 <UART_SetConfig+0x384>)
 80039ac:	fba3 1302 	umull	r1, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	2164      	movs	r1, #100	; 0x64
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	3332      	adds	r3, #50	; 0x32
 80039be:	4a86      	ldr	r2, [pc, #536]	; (8003bd8 <UART_SetConfig+0x384>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039cc:	4498      	add	r8, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	461d      	mov	r5, r3
 80039d2:	f04f 0600 	mov.w	r6, #0
 80039d6:	46a9      	mov	r9, r5
 80039d8:	46b2      	mov	sl, r6
 80039da:	eb19 0309 	adds.w	r3, r9, r9
 80039de:	eb4a 040a 	adc.w	r4, sl, sl
 80039e2:	4699      	mov	r9, r3
 80039e4:	46a2      	mov	sl, r4
 80039e6:	eb19 0905 	adds.w	r9, r9, r5
 80039ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80039ee:	f04f 0100 	mov.w	r1, #0
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a02:	4689      	mov	r9, r1
 8003a04:	4692      	mov	sl, r2
 8003a06:	eb19 0005 	adds.w	r0, r9, r5
 8003a0a:	eb4a 0106 	adc.w	r1, sl, r6
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	461d      	mov	r5, r3
 8003a14:	f04f 0600 	mov.w	r6, #0
 8003a18:	196b      	adds	r3, r5, r5
 8003a1a:	eb46 0406 	adc.w	r4, r6, r6
 8003a1e:	461a      	mov	r2, r3
 8003a20:	4623      	mov	r3, r4
 8003a22:	f7fc fe11 	bl	8000648 <__aeabi_uldivmod>
 8003a26:	4603      	mov	r3, r0
 8003a28:	460c      	mov	r4, r1
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	; (8003bd8 <UART_SetConfig+0x384>)
 8003a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2164      	movs	r1, #100	; 0x64
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	3332      	adds	r3, #50	; 0x32
 8003a40:	4a65      	ldr	r2, [pc, #404]	; (8003bd8 <UART_SetConfig+0x384>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	f003 0207 	and.w	r2, r3, #7
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4442      	add	r2, r8
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	e26f      	b.n	8003f36 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a56:	f7fe fb79 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8003a5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	461d      	mov	r5, r3
 8003a60:	f04f 0600 	mov.w	r6, #0
 8003a64:	46a8      	mov	r8, r5
 8003a66:	46b1      	mov	r9, r6
 8003a68:	eb18 0308 	adds.w	r3, r8, r8
 8003a6c:	eb49 0409 	adc.w	r4, r9, r9
 8003a70:	4698      	mov	r8, r3
 8003a72:	46a1      	mov	r9, r4
 8003a74:	eb18 0805 	adds.w	r8, r8, r5
 8003a78:	eb49 0906 	adc.w	r9, r9, r6
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a90:	4688      	mov	r8, r1
 8003a92:	4691      	mov	r9, r2
 8003a94:	eb18 0005 	adds.w	r0, r8, r5
 8003a98:	eb49 0106 	adc.w	r1, r9, r6
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	461d      	mov	r5, r3
 8003aa2:	f04f 0600 	mov.w	r6, #0
 8003aa6:	196b      	adds	r3, r5, r5
 8003aa8:	eb46 0406 	adc.w	r4, r6, r6
 8003aac:	461a      	mov	r2, r3
 8003aae:	4623      	mov	r3, r4
 8003ab0:	f7fc fdca 	bl	8000648 <__aeabi_uldivmod>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <UART_SetConfig+0x384>)
 8003abc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	461d      	mov	r5, r3
 8003aca:	f04f 0600 	mov.w	r6, #0
 8003ace:	46a9      	mov	r9, r5
 8003ad0:	46b2      	mov	sl, r6
 8003ad2:	eb19 0309 	adds.w	r3, r9, r9
 8003ad6:	eb4a 040a 	adc.w	r4, sl, sl
 8003ada:	4699      	mov	r9, r3
 8003adc:	46a2      	mov	sl, r4
 8003ade:	eb19 0905 	adds.w	r9, r9, r5
 8003ae2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ae6:	f04f 0100 	mov.w	r1, #0
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003af2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003af6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003afa:	4689      	mov	r9, r1
 8003afc:	4692      	mov	sl, r2
 8003afe:	eb19 0005 	adds.w	r0, r9, r5
 8003b02:	eb4a 0106 	adc.w	r1, sl, r6
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	461d      	mov	r5, r3
 8003b0c:	f04f 0600 	mov.w	r6, #0
 8003b10:	196b      	adds	r3, r5, r5
 8003b12:	eb46 0406 	adc.w	r4, r6, r6
 8003b16:	461a      	mov	r2, r3
 8003b18:	4623      	mov	r3, r4
 8003b1a:	f7fc fd95 	bl	8000648 <__aeabi_uldivmod>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	460c      	mov	r4, r1
 8003b22:	461a      	mov	r2, r3
 8003b24:	4b2c      	ldr	r3, [pc, #176]	; (8003bd8 <UART_SetConfig+0x384>)
 8003b26:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	2164      	movs	r1, #100	; 0x64
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	3332      	adds	r3, #50	; 0x32
 8003b38:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <UART_SetConfig+0x384>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b46:	4498      	add	r8, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	461d      	mov	r5, r3
 8003b4c:	f04f 0600 	mov.w	r6, #0
 8003b50:	46a9      	mov	r9, r5
 8003b52:	46b2      	mov	sl, r6
 8003b54:	eb19 0309 	adds.w	r3, r9, r9
 8003b58:	eb4a 040a 	adc.w	r4, sl, sl
 8003b5c:	4699      	mov	r9, r3
 8003b5e:	46a2      	mov	sl, r4
 8003b60:	eb19 0905 	adds.w	r9, r9, r5
 8003b64:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b7c:	4689      	mov	r9, r1
 8003b7e:	4692      	mov	sl, r2
 8003b80:	eb19 0005 	adds.w	r0, r9, r5
 8003b84:	eb4a 0106 	adc.w	r1, sl, r6
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	461d      	mov	r5, r3
 8003b8e:	f04f 0600 	mov.w	r6, #0
 8003b92:	196b      	adds	r3, r5, r5
 8003b94:	eb46 0406 	adc.w	r4, r6, r6
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4623      	mov	r3, r4
 8003b9c:	f7fc fd54 	bl	8000648 <__aeabi_uldivmod>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <UART_SetConfig+0x384>)
 8003ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	2164      	movs	r1, #100	; 0x64
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	3332      	adds	r3, #50	; 0x32
 8003bba:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <UART_SetConfig+0x384>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	f003 0207 	and.w	r2, r3, #7
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4442      	add	r2, r8
 8003bcc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003bce:	e1b2      	b.n	8003f36 <UART_SetConfig+0x6e2>
 8003bd0:	40011000 	.word	0x40011000
 8003bd4:	40011400 	.word	0x40011400
 8003bd8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4ad7      	ldr	r2, [pc, #860]	; (8003f40 <UART_SetConfig+0x6ec>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d005      	beq.n	8003bf2 <UART_SetConfig+0x39e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4ad6      	ldr	r2, [pc, #856]	; (8003f44 <UART_SetConfig+0x6f0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	f040 80d1 	bne.w	8003d94 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bf2:	f7fe fabf 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 8003bf6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	469a      	mov	sl, r3
 8003bfc:	f04f 0b00 	mov.w	fp, #0
 8003c00:	46d0      	mov	r8, sl
 8003c02:	46d9      	mov	r9, fp
 8003c04:	eb18 0308 	adds.w	r3, r8, r8
 8003c08:	eb49 0409 	adc.w	r4, r9, r9
 8003c0c:	4698      	mov	r8, r3
 8003c0e:	46a1      	mov	r9, r4
 8003c10:	eb18 080a 	adds.w	r8, r8, sl
 8003c14:	eb49 090b 	adc.w	r9, r9, fp
 8003c18:	f04f 0100 	mov.w	r1, #0
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c2c:	4688      	mov	r8, r1
 8003c2e:	4691      	mov	r9, r2
 8003c30:	eb1a 0508 	adds.w	r5, sl, r8
 8003c34:	eb4b 0609 	adc.w	r6, fp, r9
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	f04f 0400 	mov.w	r4, #0
 8003c4a:	0094      	lsls	r4, r2, #2
 8003c4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c50:	008b      	lsls	r3, r1, #2
 8003c52:	461a      	mov	r2, r3
 8003c54:	4623      	mov	r3, r4
 8003c56:	4628      	mov	r0, r5
 8003c58:	4631      	mov	r1, r6
 8003c5a:	f7fc fcf5 	bl	8000648 <__aeabi_uldivmod>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	460c      	mov	r4, r1
 8003c62:	461a      	mov	r2, r3
 8003c64:	4bb8      	ldr	r3, [pc, #736]	; (8003f48 <UART_SetConfig+0x6f4>)
 8003c66:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	469b      	mov	fp, r3
 8003c74:	f04f 0c00 	mov.w	ip, #0
 8003c78:	46d9      	mov	r9, fp
 8003c7a:	46e2      	mov	sl, ip
 8003c7c:	eb19 0309 	adds.w	r3, r9, r9
 8003c80:	eb4a 040a 	adc.w	r4, sl, sl
 8003c84:	4699      	mov	r9, r3
 8003c86:	46a2      	mov	sl, r4
 8003c88:	eb19 090b 	adds.w	r9, r9, fp
 8003c8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c90:	f04f 0100 	mov.w	r1, #0
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ca0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ca4:	4689      	mov	r9, r1
 8003ca6:	4692      	mov	sl, r2
 8003ca8:	eb1b 0509 	adds.w	r5, fp, r9
 8003cac:	eb4c 060a 	adc.w	r6, ip, sl
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	f04f 0400 	mov.w	r4, #0
 8003cc2:	0094      	lsls	r4, r2, #2
 8003cc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cc8:	008b      	lsls	r3, r1, #2
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4623      	mov	r3, r4
 8003cce:	4628      	mov	r0, r5
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	f7fc fcb9 	bl	8000648 <__aeabi_uldivmod>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	460c      	mov	r4, r1
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4b9a      	ldr	r3, [pc, #616]	; (8003f48 <UART_SetConfig+0x6f4>)
 8003cde:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2164      	movs	r1, #100	; 0x64
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	3332      	adds	r3, #50	; 0x32
 8003cf0:	4a95      	ldr	r2, [pc, #596]	; (8003f48 <UART_SetConfig+0x6f4>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cfc:	4498      	add	r8, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	469b      	mov	fp, r3
 8003d02:	f04f 0c00 	mov.w	ip, #0
 8003d06:	46d9      	mov	r9, fp
 8003d08:	46e2      	mov	sl, ip
 8003d0a:	eb19 0309 	adds.w	r3, r9, r9
 8003d0e:	eb4a 040a 	adc.w	r4, sl, sl
 8003d12:	4699      	mov	r9, r3
 8003d14:	46a2      	mov	sl, r4
 8003d16:	eb19 090b 	adds.w	r9, r9, fp
 8003d1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d1e:	f04f 0100 	mov.w	r1, #0
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d32:	4689      	mov	r9, r1
 8003d34:	4692      	mov	sl, r2
 8003d36:	eb1b 0509 	adds.w	r5, fp, r9
 8003d3a:	eb4c 060a 	adc.w	r6, ip, sl
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4619      	mov	r1, r3
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	f04f 0400 	mov.w	r4, #0
 8003d50:	0094      	lsls	r4, r2, #2
 8003d52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d56:	008b      	lsls	r3, r1, #2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4623      	mov	r3, r4
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	4631      	mov	r1, r6
 8003d60:	f7fc fc72 	bl	8000648 <__aeabi_uldivmod>
 8003d64:	4603      	mov	r3, r0
 8003d66:	460c      	mov	r4, r1
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b77      	ldr	r3, [pc, #476]	; (8003f48 <UART_SetConfig+0x6f4>)
 8003d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	2164      	movs	r1, #100	; 0x64
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	3332      	adds	r3, #50	; 0x32
 8003d7e:	4a72      	ldr	r2, [pc, #456]	; (8003f48 <UART_SetConfig+0x6f4>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	f003 020f 	and.w	r2, r3, #15
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4442      	add	r2, r8
 8003d90:	609a      	str	r2, [r3, #8]
 8003d92:	e0d0      	b.n	8003f36 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d94:	f7fe f9da 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8003d98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	469a      	mov	sl, r3
 8003d9e:	f04f 0b00 	mov.w	fp, #0
 8003da2:	46d0      	mov	r8, sl
 8003da4:	46d9      	mov	r9, fp
 8003da6:	eb18 0308 	adds.w	r3, r8, r8
 8003daa:	eb49 0409 	adc.w	r4, r9, r9
 8003dae:	4698      	mov	r8, r3
 8003db0:	46a1      	mov	r9, r4
 8003db2:	eb18 080a 	adds.w	r8, r8, sl
 8003db6:	eb49 090b 	adc.w	r9, r9, fp
 8003dba:	f04f 0100 	mov.w	r1, #0
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dc6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dce:	4688      	mov	r8, r1
 8003dd0:	4691      	mov	r9, r2
 8003dd2:	eb1a 0508 	adds.w	r5, sl, r8
 8003dd6:	eb4b 0609 	adc.w	r6, fp, r9
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4619      	mov	r1, r3
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	f04f 0400 	mov.w	r4, #0
 8003dec:	0094      	lsls	r4, r2, #2
 8003dee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003df2:	008b      	lsls	r3, r1, #2
 8003df4:	461a      	mov	r2, r3
 8003df6:	4623      	mov	r3, r4
 8003df8:	4628      	mov	r0, r5
 8003dfa:	4631      	mov	r1, r6
 8003dfc:	f7fc fc24 	bl	8000648 <__aeabi_uldivmod>
 8003e00:	4603      	mov	r3, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b50      	ldr	r3, [pc, #320]	; (8003f48 <UART_SetConfig+0x6f4>)
 8003e08:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	469b      	mov	fp, r3
 8003e16:	f04f 0c00 	mov.w	ip, #0
 8003e1a:	46d9      	mov	r9, fp
 8003e1c:	46e2      	mov	sl, ip
 8003e1e:	eb19 0309 	adds.w	r3, r9, r9
 8003e22:	eb4a 040a 	adc.w	r4, sl, sl
 8003e26:	4699      	mov	r9, r3
 8003e28:	46a2      	mov	sl, r4
 8003e2a:	eb19 090b 	adds.w	r9, r9, fp
 8003e2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e32:	f04f 0100 	mov.w	r1, #0
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e46:	4689      	mov	r9, r1
 8003e48:	4692      	mov	sl, r2
 8003e4a:	eb1b 0509 	adds.w	r5, fp, r9
 8003e4e:	eb4c 060a 	adc.w	r6, ip, sl
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4619      	mov	r1, r3
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	f04f 0400 	mov.w	r4, #0
 8003e64:	0094      	lsls	r4, r2, #2
 8003e66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e6a:	008b      	lsls	r3, r1, #2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4623      	mov	r3, r4
 8003e70:	4628      	mov	r0, r5
 8003e72:	4631      	mov	r1, r6
 8003e74:	f7fc fbe8 	bl	8000648 <__aeabi_uldivmod>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <UART_SetConfig+0x6f4>)
 8003e80:	fba3 1302 	umull	r1, r3, r3, r2
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	2164      	movs	r1, #100	; 0x64
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	3332      	adds	r3, #50	; 0x32
 8003e92:	4a2d      	ldr	r2, [pc, #180]	; (8003f48 <UART_SetConfig+0x6f4>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e9e:	4498      	add	r8, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	469b      	mov	fp, r3
 8003ea4:	f04f 0c00 	mov.w	ip, #0
 8003ea8:	46d9      	mov	r9, fp
 8003eaa:	46e2      	mov	sl, ip
 8003eac:	eb19 0309 	adds.w	r3, r9, r9
 8003eb0:	eb4a 040a 	adc.w	r4, sl, sl
 8003eb4:	4699      	mov	r9, r3
 8003eb6:	46a2      	mov	sl, r4
 8003eb8:	eb19 090b 	adds.w	r9, r9, fp
 8003ebc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ec0:	f04f 0100 	mov.w	r1, #0
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ecc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ed0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ed4:	4689      	mov	r9, r1
 8003ed6:	4692      	mov	sl, r2
 8003ed8:	eb1b 0509 	adds.w	r5, fp, r9
 8003edc:	eb4c 060a 	adc.w	r6, ip, sl
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	f04f 0400 	mov.w	r4, #0
 8003ef2:	0094      	lsls	r4, r2, #2
 8003ef4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ef8:	008b      	lsls	r3, r1, #2
 8003efa:	461a      	mov	r2, r3
 8003efc:	4623      	mov	r3, r4
 8003efe:	4628      	mov	r0, r5
 8003f00:	4631      	mov	r1, r6
 8003f02:	f7fc fba1 	bl	8000648 <__aeabi_uldivmod>
 8003f06:	4603      	mov	r3, r0
 8003f08:	460c      	mov	r4, r1
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <UART_SetConfig+0x6f4>)
 8003f0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2164      	movs	r1, #100	; 0x64
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	3332      	adds	r3, #50	; 0x32
 8003f20:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <UART_SetConfig+0x6f4>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	f003 020f 	and.w	r2, r3, #15
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4442      	add	r2, r8
 8003f32:	609a      	str	r2, [r3, #8]
}
 8003f34:	e7ff      	b.n	8003f36 <UART_SetConfig+0x6e2>
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f40:	40011000 	.word	0x40011000
 8003f44:	40011400 	.word	0x40011400
 8003f48:	51eb851f 	.word	0x51eb851f

08003f4c <__errno>:
 8003f4c:	4b01      	ldr	r3, [pc, #4]	; (8003f54 <__errno+0x8>)
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	2000000c 	.word	0x2000000c

08003f58 <__libc_init_array>:
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	4e0d      	ldr	r6, [pc, #52]	; (8003f90 <__libc_init_array+0x38>)
 8003f5c:	4c0d      	ldr	r4, [pc, #52]	; (8003f94 <__libc_init_array+0x3c>)
 8003f5e:	1ba4      	subs	r4, r4, r6
 8003f60:	10a4      	asrs	r4, r4, #2
 8003f62:	2500      	movs	r5, #0
 8003f64:	42a5      	cmp	r5, r4
 8003f66:	d109      	bne.n	8003f7c <__libc_init_array+0x24>
 8003f68:	4e0b      	ldr	r6, [pc, #44]	; (8003f98 <__libc_init_array+0x40>)
 8003f6a:	4c0c      	ldr	r4, [pc, #48]	; (8003f9c <__libc_init_array+0x44>)
 8003f6c:	f000 fc60 	bl	8004830 <_init>
 8003f70:	1ba4      	subs	r4, r4, r6
 8003f72:	10a4      	asrs	r4, r4, #2
 8003f74:	2500      	movs	r5, #0
 8003f76:	42a5      	cmp	r5, r4
 8003f78:	d105      	bne.n	8003f86 <__libc_init_array+0x2e>
 8003f7a:	bd70      	pop	{r4, r5, r6, pc}
 8003f7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f80:	4798      	blx	r3
 8003f82:	3501      	adds	r5, #1
 8003f84:	e7ee      	b.n	8003f64 <__libc_init_array+0xc>
 8003f86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f8a:	4798      	blx	r3
 8003f8c:	3501      	adds	r5, #1
 8003f8e:	e7f2      	b.n	8003f76 <__libc_init_array+0x1e>
 8003f90:	080048ac 	.word	0x080048ac
 8003f94:	080048ac 	.word	0x080048ac
 8003f98:	080048ac 	.word	0x080048ac
 8003f9c:	080048b0 	.word	0x080048b0

08003fa0 <memset>:
 8003fa0:	4402      	add	r2, r0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d100      	bne.n	8003faa <memset+0xa>
 8003fa8:	4770      	bx	lr
 8003faa:	f803 1b01 	strb.w	r1, [r3], #1
 8003fae:	e7f9      	b.n	8003fa4 <memset+0x4>

08003fb0 <siprintf>:
 8003fb0:	b40e      	push	{r1, r2, r3}
 8003fb2:	b500      	push	{lr}
 8003fb4:	b09c      	sub	sp, #112	; 0x70
 8003fb6:	ab1d      	add	r3, sp, #116	; 0x74
 8003fb8:	9002      	str	r0, [sp, #8]
 8003fba:	9006      	str	r0, [sp, #24]
 8003fbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fc0:	4809      	ldr	r0, [pc, #36]	; (8003fe8 <siprintf+0x38>)
 8003fc2:	9107      	str	r1, [sp, #28]
 8003fc4:	9104      	str	r1, [sp, #16]
 8003fc6:	4909      	ldr	r1, [pc, #36]	; (8003fec <siprintf+0x3c>)
 8003fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fcc:	9105      	str	r1, [sp, #20]
 8003fce:	6800      	ldr	r0, [r0, #0]
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	a902      	add	r1, sp, #8
 8003fd4:	f000 f866 	bl	80040a4 <_svfiprintf_r>
 8003fd8:	9b02      	ldr	r3, [sp, #8]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	b01c      	add	sp, #112	; 0x70
 8003fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fe4:	b003      	add	sp, #12
 8003fe6:	4770      	bx	lr
 8003fe8:	2000000c 	.word	0x2000000c
 8003fec:	ffff0208 	.word	0xffff0208

08003ff0 <__ssputs_r>:
 8003ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	688e      	ldr	r6, [r1, #8]
 8003ff6:	429e      	cmp	r6, r3
 8003ff8:	4682      	mov	sl, r0
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	4690      	mov	r8, r2
 8003ffe:	4699      	mov	r9, r3
 8004000:	d837      	bhi.n	8004072 <__ssputs_r+0x82>
 8004002:	898a      	ldrh	r2, [r1, #12]
 8004004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004008:	d031      	beq.n	800406e <__ssputs_r+0x7e>
 800400a:	6825      	ldr	r5, [r4, #0]
 800400c:	6909      	ldr	r1, [r1, #16]
 800400e:	1a6f      	subs	r7, r5, r1
 8004010:	6965      	ldr	r5, [r4, #20]
 8004012:	2302      	movs	r3, #2
 8004014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004018:	fb95 f5f3 	sdiv	r5, r5, r3
 800401c:	f109 0301 	add.w	r3, r9, #1
 8004020:	443b      	add	r3, r7
 8004022:	429d      	cmp	r5, r3
 8004024:	bf38      	it	cc
 8004026:	461d      	movcc	r5, r3
 8004028:	0553      	lsls	r3, r2, #21
 800402a:	d530      	bpl.n	800408e <__ssputs_r+0x9e>
 800402c:	4629      	mov	r1, r5
 800402e:	f000 fb2b 	bl	8004688 <_malloc_r>
 8004032:	4606      	mov	r6, r0
 8004034:	b950      	cbnz	r0, 800404c <__ssputs_r+0x5c>
 8004036:	230c      	movs	r3, #12
 8004038:	f8ca 3000 	str.w	r3, [sl]
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800404c:	463a      	mov	r2, r7
 800404e:	6921      	ldr	r1, [r4, #16]
 8004050:	f000 faa8 	bl	80045a4 <memcpy>
 8004054:	89a3      	ldrh	r3, [r4, #12]
 8004056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800405a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405e:	81a3      	strh	r3, [r4, #12]
 8004060:	6126      	str	r6, [r4, #16]
 8004062:	6165      	str	r5, [r4, #20]
 8004064:	443e      	add	r6, r7
 8004066:	1bed      	subs	r5, r5, r7
 8004068:	6026      	str	r6, [r4, #0]
 800406a:	60a5      	str	r5, [r4, #8]
 800406c:	464e      	mov	r6, r9
 800406e:	454e      	cmp	r6, r9
 8004070:	d900      	bls.n	8004074 <__ssputs_r+0x84>
 8004072:	464e      	mov	r6, r9
 8004074:	4632      	mov	r2, r6
 8004076:	4641      	mov	r1, r8
 8004078:	6820      	ldr	r0, [r4, #0]
 800407a:	f000 fa9e 	bl	80045ba <memmove>
 800407e:	68a3      	ldr	r3, [r4, #8]
 8004080:	1b9b      	subs	r3, r3, r6
 8004082:	60a3      	str	r3, [r4, #8]
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	441e      	add	r6, r3
 8004088:	6026      	str	r6, [r4, #0]
 800408a:	2000      	movs	r0, #0
 800408c:	e7dc      	b.n	8004048 <__ssputs_r+0x58>
 800408e:	462a      	mov	r2, r5
 8004090:	f000 fb54 	bl	800473c <_realloc_r>
 8004094:	4606      	mov	r6, r0
 8004096:	2800      	cmp	r0, #0
 8004098:	d1e2      	bne.n	8004060 <__ssputs_r+0x70>
 800409a:	6921      	ldr	r1, [r4, #16]
 800409c:	4650      	mov	r0, sl
 800409e:	f000 faa5 	bl	80045ec <_free_r>
 80040a2:	e7c8      	b.n	8004036 <__ssputs_r+0x46>

080040a4 <_svfiprintf_r>:
 80040a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a8:	461d      	mov	r5, r3
 80040aa:	898b      	ldrh	r3, [r1, #12]
 80040ac:	061f      	lsls	r7, r3, #24
 80040ae:	b09d      	sub	sp, #116	; 0x74
 80040b0:	4680      	mov	r8, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	4616      	mov	r6, r2
 80040b6:	d50f      	bpl.n	80040d8 <_svfiprintf_r+0x34>
 80040b8:	690b      	ldr	r3, [r1, #16]
 80040ba:	b96b      	cbnz	r3, 80040d8 <_svfiprintf_r+0x34>
 80040bc:	2140      	movs	r1, #64	; 0x40
 80040be:	f000 fae3 	bl	8004688 <_malloc_r>
 80040c2:	6020      	str	r0, [r4, #0]
 80040c4:	6120      	str	r0, [r4, #16]
 80040c6:	b928      	cbnz	r0, 80040d4 <_svfiprintf_r+0x30>
 80040c8:	230c      	movs	r3, #12
 80040ca:	f8c8 3000 	str.w	r3, [r8]
 80040ce:	f04f 30ff 	mov.w	r0, #4294967295
 80040d2:	e0c8      	b.n	8004266 <_svfiprintf_r+0x1c2>
 80040d4:	2340      	movs	r3, #64	; 0x40
 80040d6:	6163      	str	r3, [r4, #20]
 80040d8:	2300      	movs	r3, #0
 80040da:	9309      	str	r3, [sp, #36]	; 0x24
 80040dc:	2320      	movs	r3, #32
 80040de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040e2:	2330      	movs	r3, #48	; 0x30
 80040e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040e8:	9503      	str	r5, [sp, #12]
 80040ea:	f04f 0b01 	mov.w	fp, #1
 80040ee:	4637      	mov	r7, r6
 80040f0:	463d      	mov	r5, r7
 80040f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80040f6:	b10b      	cbz	r3, 80040fc <_svfiprintf_r+0x58>
 80040f8:	2b25      	cmp	r3, #37	; 0x25
 80040fa:	d13e      	bne.n	800417a <_svfiprintf_r+0xd6>
 80040fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8004100:	d00b      	beq.n	800411a <_svfiprintf_r+0x76>
 8004102:	4653      	mov	r3, sl
 8004104:	4632      	mov	r2, r6
 8004106:	4621      	mov	r1, r4
 8004108:	4640      	mov	r0, r8
 800410a:	f7ff ff71 	bl	8003ff0 <__ssputs_r>
 800410e:	3001      	adds	r0, #1
 8004110:	f000 80a4 	beq.w	800425c <_svfiprintf_r+0x1b8>
 8004114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004116:	4453      	add	r3, sl
 8004118:	9309      	str	r3, [sp, #36]	; 0x24
 800411a:	783b      	ldrb	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 809d 	beq.w	800425c <_svfiprintf_r+0x1b8>
 8004122:	2300      	movs	r3, #0
 8004124:	f04f 32ff 	mov.w	r2, #4294967295
 8004128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800412c:	9304      	str	r3, [sp, #16]
 800412e:	9307      	str	r3, [sp, #28]
 8004130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004134:	931a      	str	r3, [sp, #104]	; 0x68
 8004136:	462f      	mov	r7, r5
 8004138:	2205      	movs	r2, #5
 800413a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800413e:	4850      	ldr	r0, [pc, #320]	; (8004280 <_svfiprintf_r+0x1dc>)
 8004140:	f7fc f84e 	bl	80001e0 <memchr>
 8004144:	9b04      	ldr	r3, [sp, #16]
 8004146:	b9d0      	cbnz	r0, 800417e <_svfiprintf_r+0xda>
 8004148:	06d9      	lsls	r1, r3, #27
 800414a:	bf44      	itt	mi
 800414c:	2220      	movmi	r2, #32
 800414e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004152:	071a      	lsls	r2, r3, #28
 8004154:	bf44      	itt	mi
 8004156:	222b      	movmi	r2, #43	; 0x2b
 8004158:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800415c:	782a      	ldrb	r2, [r5, #0]
 800415e:	2a2a      	cmp	r2, #42	; 0x2a
 8004160:	d015      	beq.n	800418e <_svfiprintf_r+0xea>
 8004162:	9a07      	ldr	r2, [sp, #28]
 8004164:	462f      	mov	r7, r5
 8004166:	2000      	movs	r0, #0
 8004168:	250a      	movs	r5, #10
 800416a:	4639      	mov	r1, r7
 800416c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004170:	3b30      	subs	r3, #48	; 0x30
 8004172:	2b09      	cmp	r3, #9
 8004174:	d94d      	bls.n	8004212 <_svfiprintf_r+0x16e>
 8004176:	b1b8      	cbz	r0, 80041a8 <_svfiprintf_r+0x104>
 8004178:	e00f      	b.n	800419a <_svfiprintf_r+0xf6>
 800417a:	462f      	mov	r7, r5
 800417c:	e7b8      	b.n	80040f0 <_svfiprintf_r+0x4c>
 800417e:	4a40      	ldr	r2, [pc, #256]	; (8004280 <_svfiprintf_r+0x1dc>)
 8004180:	1a80      	subs	r0, r0, r2
 8004182:	fa0b f000 	lsl.w	r0, fp, r0
 8004186:	4318      	orrs	r0, r3
 8004188:	9004      	str	r0, [sp, #16]
 800418a:	463d      	mov	r5, r7
 800418c:	e7d3      	b.n	8004136 <_svfiprintf_r+0x92>
 800418e:	9a03      	ldr	r2, [sp, #12]
 8004190:	1d11      	adds	r1, r2, #4
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	9103      	str	r1, [sp, #12]
 8004196:	2a00      	cmp	r2, #0
 8004198:	db01      	blt.n	800419e <_svfiprintf_r+0xfa>
 800419a:	9207      	str	r2, [sp, #28]
 800419c:	e004      	b.n	80041a8 <_svfiprintf_r+0x104>
 800419e:	4252      	negs	r2, r2
 80041a0:	f043 0302 	orr.w	r3, r3, #2
 80041a4:	9207      	str	r2, [sp, #28]
 80041a6:	9304      	str	r3, [sp, #16]
 80041a8:	783b      	ldrb	r3, [r7, #0]
 80041aa:	2b2e      	cmp	r3, #46	; 0x2e
 80041ac:	d10c      	bne.n	80041c8 <_svfiprintf_r+0x124>
 80041ae:	787b      	ldrb	r3, [r7, #1]
 80041b0:	2b2a      	cmp	r3, #42	; 0x2a
 80041b2:	d133      	bne.n	800421c <_svfiprintf_r+0x178>
 80041b4:	9b03      	ldr	r3, [sp, #12]
 80041b6:	1d1a      	adds	r2, r3, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	9203      	str	r2, [sp, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bfb8      	it	lt
 80041c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80041c4:	3702      	adds	r7, #2
 80041c6:	9305      	str	r3, [sp, #20]
 80041c8:	4d2e      	ldr	r5, [pc, #184]	; (8004284 <_svfiprintf_r+0x1e0>)
 80041ca:	7839      	ldrb	r1, [r7, #0]
 80041cc:	2203      	movs	r2, #3
 80041ce:	4628      	mov	r0, r5
 80041d0:	f7fc f806 	bl	80001e0 <memchr>
 80041d4:	b138      	cbz	r0, 80041e6 <_svfiprintf_r+0x142>
 80041d6:	2340      	movs	r3, #64	; 0x40
 80041d8:	1b40      	subs	r0, r0, r5
 80041da:	fa03 f000 	lsl.w	r0, r3, r0
 80041de:	9b04      	ldr	r3, [sp, #16]
 80041e0:	4303      	orrs	r3, r0
 80041e2:	3701      	adds	r7, #1
 80041e4:	9304      	str	r3, [sp, #16]
 80041e6:	7839      	ldrb	r1, [r7, #0]
 80041e8:	4827      	ldr	r0, [pc, #156]	; (8004288 <_svfiprintf_r+0x1e4>)
 80041ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041ee:	2206      	movs	r2, #6
 80041f0:	1c7e      	adds	r6, r7, #1
 80041f2:	f7fb fff5 	bl	80001e0 <memchr>
 80041f6:	2800      	cmp	r0, #0
 80041f8:	d038      	beq.n	800426c <_svfiprintf_r+0x1c8>
 80041fa:	4b24      	ldr	r3, [pc, #144]	; (800428c <_svfiprintf_r+0x1e8>)
 80041fc:	bb13      	cbnz	r3, 8004244 <_svfiprintf_r+0x1a0>
 80041fe:	9b03      	ldr	r3, [sp, #12]
 8004200:	3307      	adds	r3, #7
 8004202:	f023 0307 	bic.w	r3, r3, #7
 8004206:	3308      	adds	r3, #8
 8004208:	9303      	str	r3, [sp, #12]
 800420a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800420c:	444b      	add	r3, r9
 800420e:	9309      	str	r3, [sp, #36]	; 0x24
 8004210:	e76d      	b.n	80040ee <_svfiprintf_r+0x4a>
 8004212:	fb05 3202 	mla	r2, r5, r2, r3
 8004216:	2001      	movs	r0, #1
 8004218:	460f      	mov	r7, r1
 800421a:	e7a6      	b.n	800416a <_svfiprintf_r+0xc6>
 800421c:	2300      	movs	r3, #0
 800421e:	3701      	adds	r7, #1
 8004220:	9305      	str	r3, [sp, #20]
 8004222:	4619      	mov	r1, r3
 8004224:	250a      	movs	r5, #10
 8004226:	4638      	mov	r0, r7
 8004228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800422c:	3a30      	subs	r2, #48	; 0x30
 800422e:	2a09      	cmp	r2, #9
 8004230:	d903      	bls.n	800423a <_svfiprintf_r+0x196>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0c8      	beq.n	80041c8 <_svfiprintf_r+0x124>
 8004236:	9105      	str	r1, [sp, #20]
 8004238:	e7c6      	b.n	80041c8 <_svfiprintf_r+0x124>
 800423a:	fb05 2101 	mla	r1, r5, r1, r2
 800423e:	2301      	movs	r3, #1
 8004240:	4607      	mov	r7, r0
 8004242:	e7f0      	b.n	8004226 <_svfiprintf_r+0x182>
 8004244:	ab03      	add	r3, sp, #12
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	4622      	mov	r2, r4
 800424a:	4b11      	ldr	r3, [pc, #68]	; (8004290 <_svfiprintf_r+0x1ec>)
 800424c:	a904      	add	r1, sp, #16
 800424e:	4640      	mov	r0, r8
 8004250:	f3af 8000 	nop.w
 8004254:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004258:	4681      	mov	r9, r0
 800425a:	d1d6      	bne.n	800420a <_svfiprintf_r+0x166>
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	065b      	lsls	r3, r3, #25
 8004260:	f53f af35 	bmi.w	80040ce <_svfiprintf_r+0x2a>
 8004264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004266:	b01d      	add	sp, #116	; 0x74
 8004268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800426c:	ab03      	add	r3, sp, #12
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4622      	mov	r2, r4
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <_svfiprintf_r+0x1ec>)
 8004274:	a904      	add	r1, sp, #16
 8004276:	4640      	mov	r0, r8
 8004278:	f000 f882 	bl	8004380 <_printf_i>
 800427c:	e7ea      	b.n	8004254 <_svfiprintf_r+0x1b0>
 800427e:	bf00      	nop
 8004280:	08004870 	.word	0x08004870
 8004284:	08004876 	.word	0x08004876
 8004288:	0800487a 	.word	0x0800487a
 800428c:	00000000 	.word	0x00000000
 8004290:	08003ff1 	.word	0x08003ff1

08004294 <_printf_common>:
 8004294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004298:	4691      	mov	r9, r2
 800429a:	461f      	mov	r7, r3
 800429c:	688a      	ldr	r2, [r1, #8]
 800429e:	690b      	ldr	r3, [r1, #16]
 80042a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042a4:	4293      	cmp	r3, r2
 80042a6:	bfb8      	it	lt
 80042a8:	4613      	movlt	r3, r2
 80042aa:	f8c9 3000 	str.w	r3, [r9]
 80042ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042b2:	4606      	mov	r6, r0
 80042b4:	460c      	mov	r4, r1
 80042b6:	b112      	cbz	r2, 80042be <_printf_common+0x2a>
 80042b8:	3301      	adds	r3, #1
 80042ba:	f8c9 3000 	str.w	r3, [r9]
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	0699      	lsls	r1, r3, #26
 80042c2:	bf42      	ittt	mi
 80042c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80042c8:	3302      	addmi	r3, #2
 80042ca:	f8c9 3000 	strmi.w	r3, [r9]
 80042ce:	6825      	ldr	r5, [r4, #0]
 80042d0:	f015 0506 	ands.w	r5, r5, #6
 80042d4:	d107      	bne.n	80042e6 <_printf_common+0x52>
 80042d6:	f104 0a19 	add.w	sl, r4, #25
 80042da:	68e3      	ldr	r3, [r4, #12]
 80042dc:	f8d9 2000 	ldr.w	r2, [r9]
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	42ab      	cmp	r3, r5
 80042e4:	dc28      	bgt.n	8004338 <_printf_common+0xa4>
 80042e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80042ea:	6822      	ldr	r2, [r4, #0]
 80042ec:	3300      	adds	r3, #0
 80042ee:	bf18      	it	ne
 80042f0:	2301      	movne	r3, #1
 80042f2:	0692      	lsls	r2, r2, #26
 80042f4:	d42d      	bmi.n	8004352 <_printf_common+0xbe>
 80042f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042fa:	4639      	mov	r1, r7
 80042fc:	4630      	mov	r0, r6
 80042fe:	47c0      	blx	r8
 8004300:	3001      	adds	r0, #1
 8004302:	d020      	beq.n	8004346 <_printf_common+0xb2>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	68e5      	ldr	r5, [r4, #12]
 8004308:	f8d9 2000 	ldr.w	r2, [r9]
 800430c:	f003 0306 	and.w	r3, r3, #6
 8004310:	2b04      	cmp	r3, #4
 8004312:	bf08      	it	eq
 8004314:	1aad      	subeq	r5, r5, r2
 8004316:	68a3      	ldr	r3, [r4, #8]
 8004318:	6922      	ldr	r2, [r4, #16]
 800431a:	bf0c      	ite	eq
 800431c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004320:	2500      	movne	r5, #0
 8004322:	4293      	cmp	r3, r2
 8004324:	bfc4      	itt	gt
 8004326:	1a9b      	subgt	r3, r3, r2
 8004328:	18ed      	addgt	r5, r5, r3
 800432a:	f04f 0900 	mov.w	r9, #0
 800432e:	341a      	adds	r4, #26
 8004330:	454d      	cmp	r5, r9
 8004332:	d11a      	bne.n	800436a <_printf_common+0xd6>
 8004334:	2000      	movs	r0, #0
 8004336:	e008      	b.n	800434a <_printf_common+0xb6>
 8004338:	2301      	movs	r3, #1
 800433a:	4652      	mov	r2, sl
 800433c:	4639      	mov	r1, r7
 800433e:	4630      	mov	r0, r6
 8004340:	47c0      	blx	r8
 8004342:	3001      	adds	r0, #1
 8004344:	d103      	bne.n	800434e <_printf_common+0xba>
 8004346:	f04f 30ff 	mov.w	r0, #4294967295
 800434a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434e:	3501      	adds	r5, #1
 8004350:	e7c3      	b.n	80042da <_printf_common+0x46>
 8004352:	18e1      	adds	r1, r4, r3
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	2030      	movs	r0, #48	; 0x30
 8004358:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800435c:	4422      	add	r2, r4
 800435e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004362:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004366:	3302      	adds	r3, #2
 8004368:	e7c5      	b.n	80042f6 <_printf_common+0x62>
 800436a:	2301      	movs	r3, #1
 800436c:	4622      	mov	r2, r4
 800436e:	4639      	mov	r1, r7
 8004370:	4630      	mov	r0, r6
 8004372:	47c0      	blx	r8
 8004374:	3001      	adds	r0, #1
 8004376:	d0e6      	beq.n	8004346 <_printf_common+0xb2>
 8004378:	f109 0901 	add.w	r9, r9, #1
 800437c:	e7d8      	b.n	8004330 <_printf_common+0x9c>
	...

08004380 <_printf_i>:
 8004380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004384:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004388:	460c      	mov	r4, r1
 800438a:	7e09      	ldrb	r1, [r1, #24]
 800438c:	b085      	sub	sp, #20
 800438e:	296e      	cmp	r1, #110	; 0x6e
 8004390:	4617      	mov	r7, r2
 8004392:	4606      	mov	r6, r0
 8004394:	4698      	mov	r8, r3
 8004396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004398:	f000 80b3 	beq.w	8004502 <_printf_i+0x182>
 800439c:	d822      	bhi.n	80043e4 <_printf_i+0x64>
 800439e:	2963      	cmp	r1, #99	; 0x63
 80043a0:	d036      	beq.n	8004410 <_printf_i+0x90>
 80043a2:	d80a      	bhi.n	80043ba <_printf_i+0x3a>
 80043a4:	2900      	cmp	r1, #0
 80043a6:	f000 80b9 	beq.w	800451c <_printf_i+0x19c>
 80043aa:	2958      	cmp	r1, #88	; 0x58
 80043ac:	f000 8083 	beq.w	80044b6 <_printf_i+0x136>
 80043b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80043b8:	e032      	b.n	8004420 <_printf_i+0xa0>
 80043ba:	2964      	cmp	r1, #100	; 0x64
 80043bc:	d001      	beq.n	80043c2 <_printf_i+0x42>
 80043be:	2969      	cmp	r1, #105	; 0x69
 80043c0:	d1f6      	bne.n	80043b0 <_printf_i+0x30>
 80043c2:	6820      	ldr	r0, [r4, #0]
 80043c4:	6813      	ldr	r3, [r2, #0]
 80043c6:	0605      	lsls	r5, r0, #24
 80043c8:	f103 0104 	add.w	r1, r3, #4
 80043cc:	d52a      	bpl.n	8004424 <_printf_i+0xa4>
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6011      	str	r1, [r2, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	da03      	bge.n	80043de <_printf_i+0x5e>
 80043d6:	222d      	movs	r2, #45	; 0x2d
 80043d8:	425b      	negs	r3, r3
 80043da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80043de:	486f      	ldr	r0, [pc, #444]	; (800459c <_printf_i+0x21c>)
 80043e0:	220a      	movs	r2, #10
 80043e2:	e039      	b.n	8004458 <_printf_i+0xd8>
 80043e4:	2973      	cmp	r1, #115	; 0x73
 80043e6:	f000 809d 	beq.w	8004524 <_printf_i+0x1a4>
 80043ea:	d808      	bhi.n	80043fe <_printf_i+0x7e>
 80043ec:	296f      	cmp	r1, #111	; 0x6f
 80043ee:	d020      	beq.n	8004432 <_printf_i+0xb2>
 80043f0:	2970      	cmp	r1, #112	; 0x70
 80043f2:	d1dd      	bne.n	80043b0 <_printf_i+0x30>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	f043 0320 	orr.w	r3, r3, #32
 80043fa:	6023      	str	r3, [r4, #0]
 80043fc:	e003      	b.n	8004406 <_printf_i+0x86>
 80043fe:	2975      	cmp	r1, #117	; 0x75
 8004400:	d017      	beq.n	8004432 <_printf_i+0xb2>
 8004402:	2978      	cmp	r1, #120	; 0x78
 8004404:	d1d4      	bne.n	80043b0 <_printf_i+0x30>
 8004406:	2378      	movs	r3, #120	; 0x78
 8004408:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800440c:	4864      	ldr	r0, [pc, #400]	; (80045a0 <_printf_i+0x220>)
 800440e:	e055      	b.n	80044bc <_printf_i+0x13c>
 8004410:	6813      	ldr	r3, [r2, #0]
 8004412:	1d19      	adds	r1, r3, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6011      	str	r1, [r2, #0]
 8004418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800441c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004420:	2301      	movs	r3, #1
 8004422:	e08c      	b.n	800453e <_printf_i+0x1be>
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6011      	str	r1, [r2, #0]
 8004428:	f010 0f40 	tst.w	r0, #64	; 0x40
 800442c:	bf18      	it	ne
 800442e:	b21b      	sxthne	r3, r3
 8004430:	e7cf      	b.n	80043d2 <_printf_i+0x52>
 8004432:	6813      	ldr	r3, [r2, #0]
 8004434:	6825      	ldr	r5, [r4, #0]
 8004436:	1d18      	adds	r0, r3, #4
 8004438:	6010      	str	r0, [r2, #0]
 800443a:	0628      	lsls	r0, r5, #24
 800443c:	d501      	bpl.n	8004442 <_printf_i+0xc2>
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	e002      	b.n	8004448 <_printf_i+0xc8>
 8004442:	0668      	lsls	r0, r5, #25
 8004444:	d5fb      	bpl.n	800443e <_printf_i+0xbe>
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	4854      	ldr	r0, [pc, #336]	; (800459c <_printf_i+0x21c>)
 800444a:	296f      	cmp	r1, #111	; 0x6f
 800444c:	bf14      	ite	ne
 800444e:	220a      	movne	r2, #10
 8004450:	2208      	moveq	r2, #8
 8004452:	2100      	movs	r1, #0
 8004454:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004458:	6865      	ldr	r5, [r4, #4]
 800445a:	60a5      	str	r5, [r4, #8]
 800445c:	2d00      	cmp	r5, #0
 800445e:	f2c0 8095 	blt.w	800458c <_printf_i+0x20c>
 8004462:	6821      	ldr	r1, [r4, #0]
 8004464:	f021 0104 	bic.w	r1, r1, #4
 8004468:	6021      	str	r1, [r4, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d13d      	bne.n	80044ea <_printf_i+0x16a>
 800446e:	2d00      	cmp	r5, #0
 8004470:	f040 808e 	bne.w	8004590 <_printf_i+0x210>
 8004474:	4665      	mov	r5, ip
 8004476:	2a08      	cmp	r2, #8
 8004478:	d10b      	bne.n	8004492 <_printf_i+0x112>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	07db      	lsls	r3, r3, #31
 800447e:	d508      	bpl.n	8004492 <_printf_i+0x112>
 8004480:	6923      	ldr	r3, [r4, #16]
 8004482:	6862      	ldr	r2, [r4, #4]
 8004484:	429a      	cmp	r2, r3
 8004486:	bfde      	ittt	le
 8004488:	2330      	movle	r3, #48	; 0x30
 800448a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800448e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004492:	ebac 0305 	sub.w	r3, ip, r5
 8004496:	6123      	str	r3, [r4, #16]
 8004498:	f8cd 8000 	str.w	r8, [sp]
 800449c:	463b      	mov	r3, r7
 800449e:	aa03      	add	r2, sp, #12
 80044a0:	4621      	mov	r1, r4
 80044a2:	4630      	mov	r0, r6
 80044a4:	f7ff fef6 	bl	8004294 <_printf_common>
 80044a8:	3001      	adds	r0, #1
 80044aa:	d14d      	bne.n	8004548 <_printf_i+0x1c8>
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	b005      	add	sp, #20
 80044b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044b6:	4839      	ldr	r0, [pc, #228]	; (800459c <_printf_i+0x21c>)
 80044b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80044bc:	6813      	ldr	r3, [r2, #0]
 80044be:	6821      	ldr	r1, [r4, #0]
 80044c0:	1d1d      	adds	r5, r3, #4
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6015      	str	r5, [r2, #0]
 80044c6:	060a      	lsls	r2, r1, #24
 80044c8:	d50b      	bpl.n	80044e2 <_printf_i+0x162>
 80044ca:	07ca      	lsls	r2, r1, #31
 80044cc:	bf44      	itt	mi
 80044ce:	f041 0120 	orrmi.w	r1, r1, #32
 80044d2:	6021      	strmi	r1, [r4, #0]
 80044d4:	b91b      	cbnz	r3, 80044de <_printf_i+0x15e>
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	f022 0220 	bic.w	r2, r2, #32
 80044dc:	6022      	str	r2, [r4, #0]
 80044de:	2210      	movs	r2, #16
 80044e0:	e7b7      	b.n	8004452 <_printf_i+0xd2>
 80044e2:	064d      	lsls	r5, r1, #25
 80044e4:	bf48      	it	mi
 80044e6:	b29b      	uxthmi	r3, r3
 80044e8:	e7ef      	b.n	80044ca <_printf_i+0x14a>
 80044ea:	4665      	mov	r5, ip
 80044ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80044f0:	fb02 3311 	mls	r3, r2, r1, r3
 80044f4:	5cc3      	ldrb	r3, [r0, r3]
 80044f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80044fa:	460b      	mov	r3, r1
 80044fc:	2900      	cmp	r1, #0
 80044fe:	d1f5      	bne.n	80044ec <_printf_i+0x16c>
 8004500:	e7b9      	b.n	8004476 <_printf_i+0xf6>
 8004502:	6813      	ldr	r3, [r2, #0]
 8004504:	6825      	ldr	r5, [r4, #0]
 8004506:	6961      	ldr	r1, [r4, #20]
 8004508:	1d18      	adds	r0, r3, #4
 800450a:	6010      	str	r0, [r2, #0]
 800450c:	0628      	lsls	r0, r5, #24
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	d501      	bpl.n	8004516 <_printf_i+0x196>
 8004512:	6019      	str	r1, [r3, #0]
 8004514:	e002      	b.n	800451c <_printf_i+0x19c>
 8004516:	066a      	lsls	r2, r5, #25
 8004518:	d5fb      	bpl.n	8004512 <_printf_i+0x192>
 800451a:	8019      	strh	r1, [r3, #0]
 800451c:	2300      	movs	r3, #0
 800451e:	6123      	str	r3, [r4, #16]
 8004520:	4665      	mov	r5, ip
 8004522:	e7b9      	b.n	8004498 <_printf_i+0x118>
 8004524:	6813      	ldr	r3, [r2, #0]
 8004526:	1d19      	adds	r1, r3, #4
 8004528:	6011      	str	r1, [r2, #0]
 800452a:	681d      	ldr	r5, [r3, #0]
 800452c:	6862      	ldr	r2, [r4, #4]
 800452e:	2100      	movs	r1, #0
 8004530:	4628      	mov	r0, r5
 8004532:	f7fb fe55 	bl	80001e0 <memchr>
 8004536:	b108      	cbz	r0, 800453c <_printf_i+0x1bc>
 8004538:	1b40      	subs	r0, r0, r5
 800453a:	6060      	str	r0, [r4, #4]
 800453c:	6863      	ldr	r3, [r4, #4]
 800453e:	6123      	str	r3, [r4, #16]
 8004540:	2300      	movs	r3, #0
 8004542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004546:	e7a7      	b.n	8004498 <_printf_i+0x118>
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	462a      	mov	r2, r5
 800454c:	4639      	mov	r1, r7
 800454e:	4630      	mov	r0, r6
 8004550:	47c0      	blx	r8
 8004552:	3001      	adds	r0, #1
 8004554:	d0aa      	beq.n	80044ac <_printf_i+0x12c>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	079b      	lsls	r3, r3, #30
 800455a:	d413      	bmi.n	8004584 <_printf_i+0x204>
 800455c:	68e0      	ldr	r0, [r4, #12]
 800455e:	9b03      	ldr	r3, [sp, #12]
 8004560:	4298      	cmp	r0, r3
 8004562:	bfb8      	it	lt
 8004564:	4618      	movlt	r0, r3
 8004566:	e7a3      	b.n	80044b0 <_printf_i+0x130>
 8004568:	2301      	movs	r3, #1
 800456a:	464a      	mov	r2, r9
 800456c:	4639      	mov	r1, r7
 800456e:	4630      	mov	r0, r6
 8004570:	47c0      	blx	r8
 8004572:	3001      	adds	r0, #1
 8004574:	d09a      	beq.n	80044ac <_printf_i+0x12c>
 8004576:	3501      	adds	r5, #1
 8004578:	68e3      	ldr	r3, [r4, #12]
 800457a:	9a03      	ldr	r2, [sp, #12]
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	42ab      	cmp	r3, r5
 8004580:	dcf2      	bgt.n	8004568 <_printf_i+0x1e8>
 8004582:	e7eb      	b.n	800455c <_printf_i+0x1dc>
 8004584:	2500      	movs	r5, #0
 8004586:	f104 0919 	add.w	r9, r4, #25
 800458a:	e7f5      	b.n	8004578 <_printf_i+0x1f8>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1ac      	bne.n	80044ea <_printf_i+0x16a>
 8004590:	7803      	ldrb	r3, [r0, #0]
 8004592:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004596:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800459a:	e76c      	b.n	8004476 <_printf_i+0xf6>
 800459c:	08004881 	.word	0x08004881
 80045a0:	08004892 	.word	0x08004892

080045a4 <memcpy>:
 80045a4:	b510      	push	{r4, lr}
 80045a6:	1e43      	subs	r3, r0, #1
 80045a8:	440a      	add	r2, r1
 80045aa:	4291      	cmp	r1, r2
 80045ac:	d100      	bne.n	80045b0 <memcpy+0xc>
 80045ae:	bd10      	pop	{r4, pc}
 80045b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045b8:	e7f7      	b.n	80045aa <memcpy+0x6>

080045ba <memmove>:
 80045ba:	4288      	cmp	r0, r1
 80045bc:	b510      	push	{r4, lr}
 80045be:	eb01 0302 	add.w	r3, r1, r2
 80045c2:	d807      	bhi.n	80045d4 <memmove+0x1a>
 80045c4:	1e42      	subs	r2, r0, #1
 80045c6:	4299      	cmp	r1, r3
 80045c8:	d00a      	beq.n	80045e0 <memmove+0x26>
 80045ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80045d2:	e7f8      	b.n	80045c6 <memmove+0xc>
 80045d4:	4283      	cmp	r3, r0
 80045d6:	d9f5      	bls.n	80045c4 <memmove+0xa>
 80045d8:	1881      	adds	r1, r0, r2
 80045da:	1ad2      	subs	r2, r2, r3
 80045dc:	42d3      	cmn	r3, r2
 80045de:	d100      	bne.n	80045e2 <memmove+0x28>
 80045e0:	bd10      	pop	{r4, pc}
 80045e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80045ea:	e7f7      	b.n	80045dc <memmove+0x22>

080045ec <_free_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4605      	mov	r5, r0
 80045f0:	2900      	cmp	r1, #0
 80045f2:	d045      	beq.n	8004680 <_free_r+0x94>
 80045f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f8:	1f0c      	subs	r4, r1, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bfb8      	it	lt
 80045fe:	18e4      	addlt	r4, r4, r3
 8004600:	f000 f8d2 	bl	80047a8 <__malloc_lock>
 8004604:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <_free_r+0x98>)
 8004606:	6813      	ldr	r3, [r2, #0]
 8004608:	4610      	mov	r0, r2
 800460a:	b933      	cbnz	r3, 800461a <_free_r+0x2e>
 800460c:	6063      	str	r3, [r4, #4]
 800460e:	6014      	str	r4, [r2, #0]
 8004610:	4628      	mov	r0, r5
 8004612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004616:	f000 b8c8 	b.w	80047aa <__malloc_unlock>
 800461a:	42a3      	cmp	r3, r4
 800461c:	d90c      	bls.n	8004638 <_free_r+0x4c>
 800461e:	6821      	ldr	r1, [r4, #0]
 8004620:	1862      	adds	r2, r4, r1
 8004622:	4293      	cmp	r3, r2
 8004624:	bf04      	itt	eq
 8004626:	681a      	ldreq	r2, [r3, #0]
 8004628:	685b      	ldreq	r3, [r3, #4]
 800462a:	6063      	str	r3, [r4, #4]
 800462c:	bf04      	itt	eq
 800462e:	1852      	addeq	r2, r2, r1
 8004630:	6022      	streq	r2, [r4, #0]
 8004632:	6004      	str	r4, [r0, #0]
 8004634:	e7ec      	b.n	8004610 <_free_r+0x24>
 8004636:	4613      	mov	r3, r2
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	b10a      	cbz	r2, 8004640 <_free_r+0x54>
 800463c:	42a2      	cmp	r2, r4
 800463e:	d9fa      	bls.n	8004636 <_free_r+0x4a>
 8004640:	6819      	ldr	r1, [r3, #0]
 8004642:	1858      	adds	r0, r3, r1
 8004644:	42a0      	cmp	r0, r4
 8004646:	d10b      	bne.n	8004660 <_free_r+0x74>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	4401      	add	r1, r0
 800464c:	1858      	adds	r0, r3, r1
 800464e:	4282      	cmp	r2, r0
 8004650:	6019      	str	r1, [r3, #0]
 8004652:	d1dd      	bne.n	8004610 <_free_r+0x24>
 8004654:	6810      	ldr	r0, [r2, #0]
 8004656:	6852      	ldr	r2, [r2, #4]
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	4401      	add	r1, r0
 800465c:	6019      	str	r1, [r3, #0]
 800465e:	e7d7      	b.n	8004610 <_free_r+0x24>
 8004660:	d902      	bls.n	8004668 <_free_r+0x7c>
 8004662:	230c      	movs	r3, #12
 8004664:	602b      	str	r3, [r5, #0]
 8004666:	e7d3      	b.n	8004610 <_free_r+0x24>
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	1821      	adds	r1, r4, r0
 800466c:	428a      	cmp	r2, r1
 800466e:	bf04      	itt	eq
 8004670:	6811      	ldreq	r1, [r2, #0]
 8004672:	6852      	ldreq	r2, [r2, #4]
 8004674:	6062      	str	r2, [r4, #4]
 8004676:	bf04      	itt	eq
 8004678:	1809      	addeq	r1, r1, r0
 800467a:	6021      	streq	r1, [r4, #0]
 800467c:	605c      	str	r4, [r3, #4]
 800467e:	e7c7      	b.n	8004610 <_free_r+0x24>
 8004680:	bd38      	pop	{r3, r4, r5, pc}
 8004682:	bf00      	nop
 8004684:	200000b4 	.word	0x200000b4

08004688 <_malloc_r>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	1ccd      	adds	r5, r1, #3
 800468c:	f025 0503 	bic.w	r5, r5, #3
 8004690:	3508      	adds	r5, #8
 8004692:	2d0c      	cmp	r5, #12
 8004694:	bf38      	it	cc
 8004696:	250c      	movcc	r5, #12
 8004698:	2d00      	cmp	r5, #0
 800469a:	4606      	mov	r6, r0
 800469c:	db01      	blt.n	80046a2 <_malloc_r+0x1a>
 800469e:	42a9      	cmp	r1, r5
 80046a0:	d903      	bls.n	80046aa <_malloc_r+0x22>
 80046a2:	230c      	movs	r3, #12
 80046a4:	6033      	str	r3, [r6, #0]
 80046a6:	2000      	movs	r0, #0
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
 80046aa:	f000 f87d 	bl	80047a8 <__malloc_lock>
 80046ae:	4a21      	ldr	r2, [pc, #132]	; (8004734 <_malloc_r+0xac>)
 80046b0:	6814      	ldr	r4, [r2, #0]
 80046b2:	4621      	mov	r1, r4
 80046b4:	b991      	cbnz	r1, 80046dc <_malloc_r+0x54>
 80046b6:	4c20      	ldr	r4, [pc, #128]	; (8004738 <_malloc_r+0xb0>)
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	b91b      	cbnz	r3, 80046c4 <_malloc_r+0x3c>
 80046bc:	4630      	mov	r0, r6
 80046be:	f000 f863 	bl	8004788 <_sbrk_r>
 80046c2:	6020      	str	r0, [r4, #0]
 80046c4:	4629      	mov	r1, r5
 80046c6:	4630      	mov	r0, r6
 80046c8:	f000 f85e 	bl	8004788 <_sbrk_r>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d124      	bne.n	800471a <_malloc_r+0x92>
 80046d0:	230c      	movs	r3, #12
 80046d2:	6033      	str	r3, [r6, #0]
 80046d4:	4630      	mov	r0, r6
 80046d6:	f000 f868 	bl	80047aa <__malloc_unlock>
 80046da:	e7e4      	b.n	80046a6 <_malloc_r+0x1e>
 80046dc:	680b      	ldr	r3, [r1, #0]
 80046de:	1b5b      	subs	r3, r3, r5
 80046e0:	d418      	bmi.n	8004714 <_malloc_r+0x8c>
 80046e2:	2b0b      	cmp	r3, #11
 80046e4:	d90f      	bls.n	8004706 <_malloc_r+0x7e>
 80046e6:	600b      	str	r3, [r1, #0]
 80046e8:	50cd      	str	r5, [r1, r3]
 80046ea:	18cc      	adds	r4, r1, r3
 80046ec:	4630      	mov	r0, r6
 80046ee:	f000 f85c 	bl	80047aa <__malloc_unlock>
 80046f2:	f104 000b 	add.w	r0, r4, #11
 80046f6:	1d23      	adds	r3, r4, #4
 80046f8:	f020 0007 	bic.w	r0, r0, #7
 80046fc:	1ac3      	subs	r3, r0, r3
 80046fe:	d0d3      	beq.n	80046a8 <_malloc_r+0x20>
 8004700:	425a      	negs	r2, r3
 8004702:	50e2      	str	r2, [r4, r3]
 8004704:	e7d0      	b.n	80046a8 <_malloc_r+0x20>
 8004706:	428c      	cmp	r4, r1
 8004708:	684b      	ldr	r3, [r1, #4]
 800470a:	bf16      	itet	ne
 800470c:	6063      	strne	r3, [r4, #4]
 800470e:	6013      	streq	r3, [r2, #0]
 8004710:	460c      	movne	r4, r1
 8004712:	e7eb      	b.n	80046ec <_malloc_r+0x64>
 8004714:	460c      	mov	r4, r1
 8004716:	6849      	ldr	r1, [r1, #4]
 8004718:	e7cc      	b.n	80046b4 <_malloc_r+0x2c>
 800471a:	1cc4      	adds	r4, r0, #3
 800471c:	f024 0403 	bic.w	r4, r4, #3
 8004720:	42a0      	cmp	r0, r4
 8004722:	d005      	beq.n	8004730 <_malloc_r+0xa8>
 8004724:	1a21      	subs	r1, r4, r0
 8004726:	4630      	mov	r0, r6
 8004728:	f000 f82e 	bl	8004788 <_sbrk_r>
 800472c:	3001      	adds	r0, #1
 800472e:	d0cf      	beq.n	80046d0 <_malloc_r+0x48>
 8004730:	6025      	str	r5, [r4, #0]
 8004732:	e7db      	b.n	80046ec <_malloc_r+0x64>
 8004734:	200000b4 	.word	0x200000b4
 8004738:	200000b8 	.word	0x200000b8

0800473c <_realloc_r>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	4607      	mov	r7, r0
 8004740:	4614      	mov	r4, r2
 8004742:	460e      	mov	r6, r1
 8004744:	b921      	cbnz	r1, 8004750 <_realloc_r+0x14>
 8004746:	4611      	mov	r1, r2
 8004748:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800474c:	f7ff bf9c 	b.w	8004688 <_malloc_r>
 8004750:	b922      	cbnz	r2, 800475c <_realloc_r+0x20>
 8004752:	f7ff ff4b 	bl	80045ec <_free_r>
 8004756:	4625      	mov	r5, r4
 8004758:	4628      	mov	r0, r5
 800475a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800475c:	f000 f826 	bl	80047ac <_malloc_usable_size_r>
 8004760:	42a0      	cmp	r0, r4
 8004762:	d20f      	bcs.n	8004784 <_realloc_r+0x48>
 8004764:	4621      	mov	r1, r4
 8004766:	4638      	mov	r0, r7
 8004768:	f7ff ff8e 	bl	8004688 <_malloc_r>
 800476c:	4605      	mov	r5, r0
 800476e:	2800      	cmp	r0, #0
 8004770:	d0f2      	beq.n	8004758 <_realloc_r+0x1c>
 8004772:	4631      	mov	r1, r6
 8004774:	4622      	mov	r2, r4
 8004776:	f7ff ff15 	bl	80045a4 <memcpy>
 800477a:	4631      	mov	r1, r6
 800477c:	4638      	mov	r0, r7
 800477e:	f7ff ff35 	bl	80045ec <_free_r>
 8004782:	e7e9      	b.n	8004758 <_realloc_r+0x1c>
 8004784:	4635      	mov	r5, r6
 8004786:	e7e7      	b.n	8004758 <_realloc_r+0x1c>

08004788 <_sbrk_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4c06      	ldr	r4, [pc, #24]	; (80047a4 <_sbrk_r+0x1c>)
 800478c:	2300      	movs	r3, #0
 800478e:	4605      	mov	r5, r0
 8004790:	4608      	mov	r0, r1
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	f7fc faf4 	bl	8000d80 <_sbrk>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_sbrk_r+0x1a>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_sbrk_r+0x1a>
 80047a0:	602b      	str	r3, [r5, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	20000190 	.word	0x20000190

080047a8 <__malloc_lock>:
 80047a8:	4770      	bx	lr

080047aa <__malloc_unlock>:
 80047aa:	4770      	bx	lr

080047ac <_malloc_usable_size_r>:
 80047ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b0:	1f18      	subs	r0, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfbc      	itt	lt
 80047b6:	580b      	ldrlt	r3, [r1, r0]
 80047b8:	18c0      	addlt	r0, r0, r3
 80047ba:	4770      	bx	lr

080047bc <trunc>:
 80047bc:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 80047c0:	ec5c bb10 	vmov	fp, ip, d0
 80047c4:	f3cc 500a 	ubfx	r0, ip, #20, #11
 80047c8:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 80047cc:	2913      	cmp	r1, #19
 80047ce:	4664      	mov	r4, ip
 80047d0:	dc11      	bgt.n	80047f6 <trunc+0x3a>
 80047d2:	2900      	cmp	r1, #0
 80047d4:	bfa7      	ittee	ge
 80047d6:	4b15      	ldrge	r3, [pc, #84]	; (800482c <trunc+0x70>)
 80047d8:	fa43 f101 	asrge.w	r1, r3, r1
 80047dc:	2200      	movlt	r2, #0
 80047de:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 80047e2:	bfa4      	itt	ge
 80047e4:	2200      	movge	r2, #0
 80047e6:	ea2c 0301 	bicge.w	r3, ip, r1
 80047ea:	4693      	mov	fp, r2
 80047ec:	469c      	mov	ip, r3
 80047ee:	ec4c bb10 	vmov	d0, fp, ip
 80047f2:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80047f6:	2933      	cmp	r1, #51	; 0x33
 80047f8:	dd0d      	ble.n	8004816 <trunc+0x5a>
 80047fa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80047fe:	d1f6      	bne.n	80047ee <trunc+0x32>
 8004800:	4663      	mov	r3, ip
 8004802:	ee10 2a10 	vmov	r2, s0
 8004806:	ee10 0a10 	vmov	r0, s0
 800480a:	4621      	mov	r1, r4
 800480c:	f7fb fd3e 	bl	800028c <__adddf3>
 8004810:	4683      	mov	fp, r0
 8004812:	468c      	mov	ip, r1
 8004814:	e7eb      	b.n	80047ee <trunc+0x32>
 8004816:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800481a:	f04f 33ff 	mov.w	r3, #4294967295
 800481e:	fa23 f000 	lsr.w	r0, r3, r0
 8004822:	ea2b 0600 	bic.w	r6, fp, r0
 8004826:	46b3      	mov	fp, r6
 8004828:	46a4      	mov	ip, r4
 800482a:	e7e0      	b.n	80047ee <trunc+0x32>
 800482c:	000fffff 	.word	0x000fffff

08004830 <_init>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	bf00      	nop
 8004834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004836:	bc08      	pop	{r3}
 8004838:	469e      	mov	lr, r3
 800483a:	4770      	bx	lr

0800483c <_fini>:
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483e:	bf00      	nop
 8004840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004842:	bc08      	pop	{r3}
 8004844:	469e      	mov	lr, r3
 8004846:	4770      	bx	lr
